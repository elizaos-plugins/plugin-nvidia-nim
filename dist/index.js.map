{"version":3,"sources":["../src/environment.ts","../src/utils/offTopicPromptParser.ts","../src/errors/nimErrors.ts","../src/actions/actionGetTopic.ts","../src/actions/actionGetSafety.ts","../src/utils/safetyPromptParser.ts","../src/actions/actionGetJailBreak.ts","../src/utils/jailbreakPromptParser.ts","../src/actions/actionGetCosmos.ts","../src/utils/assetManager.ts","../src/utils/cosmosPromptParser.ts","../src/utils/deepfakePromptParser.ts","../src/actions/actionGetDeepFake.ts","../src/utils/aiImagePromptParser.ts","../src/actions/actionGetAIImage.ts","../src/index.ts"],"names":["ENV","NVIDIA_NIM_NETWORKS","nvidiaEnvSchema","z","getConfig","env","validateNvidiaNimConfig","runtime","envConfig","config","error","errorMessage","getNetworkConfig","parseOffTopicPrompt","prompt","defaultSystem","defaultUser","systemMatch","userMatch","NimError","code","message","severity","details","GRANULAR_LOG","logGranular","data","elizaLogger","getTopicAction","_runtime","_a","_state","_options","callback","_b","messageContent","networkConfig","systemContent","userContent","openai","OpenAI","messages","completion","response","offTopicResponse","actionGetTopic_default","parseSafetyPrompt","assistantMatch","getSafetyAction","userMessage","assistantMessage","safetyResponse","analysis","safetyStatus","actionGetSafety_default","parseJailbreakPrompt","promptMatch","getJailBreakAction","inputPrompt","axios","jailbreakStatus","score","scoreText","actionGetJailBreak_default","SUPPORTED_FORMATS","ASSETS_DIR","path","NVCF_ASSET_URL","AssetManager","apiKey","currentDir","assetsPath","fs","filePath","ext","mimeType","type","urlString","url","mime","contentType","extension","_","filename","mediaInput","description","fileData","headers","authorizeRes","assetId","file","uploadPath","targetDir","workspaceRoot","absoluteTargetDir","newFilename","newPath","cosmosImageDir","cosmosTempDir","cosmosVideoDir","isVideo","isImage","debugLog","parseCosmosPrompt","text","attachments","result","process","mediaMatch","queryMatch","mediaFile","cosmosDir","fullCosmosDir","mediaPath","invoke_url","kNvcfAssetUrl","getApiKey","kSupportedList","getCosmosDescriptionAction","parsedPrompt","assetManager","dataInput","postData","uploadHeaders","uploadResponse","mediaContent","promptContent","inferHeaders","payload","responseText","cosmosResponse","actionGetCosmos_default","parseDeepFakePrompt","imageAttachment","deepfakeDir","isBase64","getDeepFakeAction","_c","_d","_e","_f","_g","_h","_i","_j","_k","_l","_m","_n","_o","_p","imageB64","tempDir","absolutePath","stats","dirContents","dirError","tempPath","uploadedAsset","apiUrl","deepfakeResponse","processedImagePath","imageBuffer","faceCount","faceDescriptions","box","idx","analysisText","actionGetDeepFake_default","parseAIImagePrompt","aiImageDir","getAIImageAction","aiImageResponse","aiProbability","topSource","prev","curr","sourceConfidence","actionGetAIImage_default","spinner","ora","chalk","actions","NVIDIA_NIM_SPASH","actionTable","Table","action","statusTable","nvidiaNimPlugin","index_default"],"mappings":"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","file":"index.js","sourcesContent":["import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\n// Environment Variables\nlet ENV: string = \"production\";\n\n// NVIDIA NIM API Configuration\nconst NVIDIA_NIM_NETWORKS = {\n    production: {\n        baseUrl: process.env.NVIDIA_NIM_BASE_URL || \"https://integrate.api.nvidia.com/v1\",\n        apiKey: process.env.NVIDIA_NIM_API_KEY\n    },\n    sandbox: {\n        baseUrl: process.env.NVIDIA_NIM_SANDBOX_URL || \"https://integrate.api.nvidia.com/v1\",\n        apiKey: process.env.NVIDIA_NIM_SANDBOX_API_KEY\n    }\n} as const;\n\nexport const nvidiaEnvSchema = z.object({\n    NVIDIA_NIM_ENV: z.enum([\"production\", \"sandbox\"]).default(\"production\"),\n    NVIDIA_NIM_SPASH: z.boolean().default(false),\n    NVIDIA_NIM_API_KEY: z.string(),\n    NVIDIA_NIM_MAX_RETRIES: z.string().transform(Number).default(\"3\"),\n    NVIDIA_NIM_RETRY_DELAY: z.string().transform(Number).default(\"1000\"),\n    NVIDIA_NIM_TIMEOUT: z.string().transform(Number).default(\"5000\"),\n    NVIDIA_NIM_LOG_LEVEL: z.enum([\"error\", \"warn\", \"info\", \"debug\"]).default(\"info\"),\n    NVIDIA_GRANULAR_LOG: z.boolean().default(false),\n    NVIDIA_OFFTOPIC_SYSTEM: z.string().default(\"You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context.\"),\n    NVIDIA_OFFTOPIC_USER: z.string().default(\"Please analyze if this message is on-topic or off-topic.\"),\n    NVIDIA_NIM_BASE_VISION_URL: z.string().optional(),\n    NVIDIA_NIM_BASE_URL: z.string().optional(),\n    NVIDIA_COSMOS_INVOKE_URL: z.string().optional(),\n    NVIDIA_COSMOS_ASSET_URL: z.string().optional()\n});\n\nexport type NvidiaNimConfig = z.infer<typeof nvidiaEnvSchema>;\n\nexport function getConfig(\n    env: string | undefined | null = ENV ||\n        process.env.NVIDIA_NIM_ENV\n): NvidiaNimConfig {\n    ENV = env || \"production\";\n\n    return {\n        NVIDIA_NIM_ENV: (env as \"production\" | \"sandbox\") || \"production\",\n        NVIDIA_NIM_SPASH: process.env.NVIDIA_NIM_SPASH === \"true\" || false,\n        NVIDIA_NIM_API_KEY: process.env.NVIDIA_NIM_API_KEY || \"\",\n        NVIDIA_NIM_MAX_RETRIES: Number(process.env.NVIDIA_NIM_MAX_RETRIES || \"3\"),\n        NVIDIA_NIM_RETRY_DELAY: Number(process.env.NVIDIA_NIM_RETRY_DELAY || \"1000\"),\n        NVIDIA_NIM_TIMEOUT: Number(process.env.NVIDIA_NIM_TIMEOUT || \"5000\"),\n        NVIDIA_NIM_LOG_LEVEL: (process.env.NVIDIA_NIM_LOG_LEVEL as \"error\" | \"warn\" | \"info\" | \"debug\") || \"info\",\n        NVIDIA_GRANULAR_LOG: process.env.NVIDIA_GRANULAR_LOG === \"true\" || false,\n        NVIDIA_OFFTOPIC_SYSTEM: process.env.NVIDIA_OFFTOPIC_SYSTEM || \"You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context.\",\n        NVIDIA_OFFTOPIC_USER: process.env.NVIDIA_OFFTOPIC_USER || \"Please analyze if this message is on-topic or off-topic.\",\n        NVIDIA_NIM_BASE_VISION_URL: process.env.NVIDIA_NIM_BASE_VISION_URL,\n        NVIDIA_NIM_BASE_URL: process.env.NVIDIA_NIM_BASE_URL,\n        NVIDIA_COSMOS_INVOKE_URL: process.env.NVIDIA_COSMOS_INVOKE_URL,\n        NVIDIA_COSMOS_ASSET_URL: process.env.NVIDIA_COSMOS_ASSET_URL\n    };\n}\n\nexport async function validateNvidiaNimConfig(\n    runtime: IAgentRuntime\n): Promise<NvidiaNimConfig> {\n    try {\n        const envConfig = getConfig(\n            runtime.getSetting(\"NVIDIA_NIM_ENV\") ?? undefined\n        );\n\n        // Add debug logging\n        console.log(\"Debug - API Key sources:\", {\n            env: process.env.NVIDIA_NIM_API_KEY ? \"present\" : \"missing\",\n            runtime: runtime.getSetting(\"NVIDIA_NIM_API_KEY\") ? \"present\" : \"missing\",\n            envConfig: envConfig.NVIDIA_NIM_API_KEY ? \"present\" : \"missing\"\n        });\n\n        const config = {\n            NVIDIA_NIM_ENV: process.env.NVIDIA_NIM_ENV || runtime.getSetting(\"NVIDIA_NIM_ENV\") || envConfig.NVIDIA_NIM_ENV,\n            NVIDIA_NIM_SPASH: process.env.NVIDIA_NIM_SPASH || runtime.getSetting(\"NVIDIA_NIM_SPASH\") || envConfig.NVIDIA_NIM_SPASH,\n            NVIDIA_NIM_API_KEY: runtime.getSetting(\"NVIDIA_NIM_API_KEY\") || process.env.NVIDIA_NIM_API_KEY || \"\",\n            NVIDIA_NIM_MAX_RETRIES: process.env.NVIDIA_NIM_MAX_RETRIES || runtime.getSetting(\"NVIDIA_NIM_MAX_RETRIES\") || envConfig.NVIDIA_NIM_MAX_RETRIES.toString(),\n            NVIDIA_NIM_RETRY_DELAY: process.env.NVIDIA_NIM_RETRY_DELAY || runtime.getSetting(\"NVIDIA_NIM_RETRY_DELAY\") || envConfig.NVIDIA_NIM_RETRY_DELAY.toString(),\n            NVIDIA_NIM_TIMEOUT: process.env.NVIDIA_NIM_TIMEOUT || runtime.getSetting(\"NVIDIA_NIM_TIMEOUT\") || envConfig.NVIDIA_NIM_TIMEOUT.toString(),\n            NVIDIA_NIM_LOG_LEVEL: process.env.NVIDIA_NIM_LOG_LEVEL || runtime.getSetting(\"NVIDIA_NIM_LOG_LEVEL\") || envConfig.NVIDIA_NIM_LOG_LEVEL,\n            NVIDIA_GRANULAR_LOG: process.env.NVIDIA_GRANULAR_LOG === \"true\" || runtime.getSetting(\"NVIDIA_GRANULAR_LOG\") === \"true\" || envConfig.NVIDIA_GRANULAR_LOG,\n            NVIDIA_OFFTOPIC_SYSTEM: process.env.NVIDIA_OFFTOPIC_SYSTEM || runtime.getSetting(\"NVIDIA_OFFTOPIC_SYSTEM\") || envConfig.NVIDIA_OFFTOPIC_SYSTEM,\n            NVIDIA_OFFTOPIC_USER: process.env.NVIDIA_OFFTOPIC_USER || runtime.getSetting(\"NVIDIA_OFFTOPIC_USER\") || envConfig.NVIDIA_OFFTOPIC_USER,\n            NVIDIA_NIM_BASE_VISION_URL: process.env.NVIDIA_NIM_BASE_VISION_URL || envConfig.NVIDIA_NIM_BASE_VISION_URL,\n            NVIDIA_NIM_BASE_URL: process.env.NVIDIA_NIM_BASE_URL || envConfig.NVIDIA_NIM_BASE_URL,\n            NVIDIA_COSMOS_INVOKE_URL: process.env.NVIDIA_COSMOS_INVOKE_URL || envConfig.NVIDIA_COSMOS_INVOKE_URL,\n            NVIDIA_COSMOS_ASSET_URL: process.env.NVIDIA_COSMOS_ASSET_URL || envConfig.NVIDIA_COSMOS_ASSET_URL\n        };\n\n        // Add validation logging\n        console.log(\"Debug - Final config:\", {\n            env: config.NVIDIA_NIM_ENV,\n            hasApiKey: !!config.NVIDIA_NIM_API_KEY,\n            apiKeyLength: config.NVIDIA_NIM_API_KEY.length\n        });\n\n        return nvidiaEnvSchema.parse(config);\n    } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        console.error(\"Config validation error:\", errorMessage);\n        throw new Error(`Failed to validate NVIDIA NIM configuration: ${errorMessage}`);\n    }\n}\n\n// Export network configurations\nexport const getNetworkConfig = (env: string = ENV) => {\n    const network = NVIDIA_NIM_NETWORKS[env as keyof typeof NVIDIA_NIM_NETWORKS];\n    return {\n        ...network,\n        baseVisionUrl: process.env.NVIDIA_NIM_BASE_VISION_URL || 'https://ai.api.nvidia.com/v1/vlm'\n    };\n};\n\n// AlphaFold2 Configuration\nexport const ALPHAFOLD2_CONFIG = {\n    API_KEY: process.env.NVIDIA_NIM_API_KEY,\n    NGC_KEY: process.env.NVIDIA_NGC_API_KEY,\n    API_URL: process.env.ALPHAFOLD_API_URL || 'https://health.api.nvidia.com/v1/biology/deepmind/alphafold2-multimer',\n    STATUS_URL: process.env.ALPHAFOLD_STATUS_URL || 'https://health.api.nvidia.com/v1/status',\n    SEQUENCES: {\n        SEQ1: process.env.SEQUENCE_ALPHA_FOLD2_1,\n        SEQ2: process.env.SEQUENCE_ALPHA_FOLD2_2\n    }\n} as const;\n\nexport interface NetworkConfig {\n    baseUrl: string;\n    baseVisionUrl: string;\n}\n","interface OffTopicParsedPrompt {\n    systemContent: string;\n    userContent: string;\n}\n\n/**\n * Parses a prompt string to extract system and user content for off-topic analysis\n * Format expected:\n * [SYSTEM]\n * System content here...\n * [/SYSTEM]\n *\n * [USER]\n * User content here...\n * [/USER]\n */\nexport function parseOffTopicPrompt(prompt: string, defaultSystem?: string, defaultUser?: string): OffTopicParsedPrompt {\n    const systemMatch = prompt.match(/\\[SYSTEM\\]([\\s\\S]*?)\\[\\/SYSTEM\\]/);\n    const userMatch = prompt.match(/\\[USER\\]([\\s\\S]*?)\\[\\/USER\\]/);\n\n    return {\n        systemContent: (systemMatch ? systemMatch[1].trim() : defaultSystem) || \"\",\n        userContent: (userMatch ? userMatch[1].trim() : defaultUser || prompt.trim()) || \"\"\n    };\n}\n\n/**\n * Creates a formatted off-topic prompt string\n */\nexport function createOffTopicPrompt(systemContent: string, userContent: string): string {\n    return `[SYSTEM]\n${systemContent}\n[/SYSTEM]\n\n[USER]\n${userContent}\n[/USER]`;\n}","export enum ErrorSeverity {\n    LOW = \"LOW\",\n    MEDIUM = \"MEDIUM\",\n    HIGH = \"HIGH\"\n}\n\nexport enum NimErrorCode {\n    VALIDATION_FAILED = \"VALIDATION_FAILED\",\n    API_ERROR = \"API_ERROR\",\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n    PARSE_ERROR = \"PARSE_ERROR\",\n    FILE_NOT_FOUND = \"FILE_NOT_FOUND\",\n    DOWNLOAD_ERROR = \"DOWNLOAD_ERROR\",\n    FILE_OPERATION_FAILED = \"FILE_OPERATION_FAILED\"\n}\n\nexport class NimError extends Error {\n    code: NimErrorCode;\n    severity: ErrorSeverity;\n    details?: unknown;\n\n    constructor(code: NimErrorCode, message: string, severity: ErrorSeverity, details?: unknown) {\n        super(message);\n        this.code = code;\n        this.severity = severity;\n        this.details = details;\n        this.name = \"NimError\";\n    }\n}\n","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\nimport OpenAI from 'openai';\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\nimport { parseOffTopicPrompt } from \"../utils/offTopicPromptParser.js\";\nimport { OffTopicContent, OffTopicResponse } from \"../types/offTopic.js\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[TopicControl] ${message}`, data);\n        console.log(`[TopicControl] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n// Action definition\nexport const getTopicAction: Action = {\n    name: \"GET_OFFTOPIC\",\n    similes: [\"CHECK_OFFTOPIC\", \"ANALYZE_OFFTOPIC\", \"OFFTOPIC_CONTROL\"],\n    description: \"Use NVIDIA NIM API to analyze and control off-topic relevance\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Check if the user message is on-topic or off-topic [SYSTEM]\\nYou are to act as an investor relations topic control system. Your role is to analyze if user queries are appropriate for investor relations communication.\\n[/SYSTEM]\\n\\n[USER]\\nCan you speculate on the potential impact of a recession on ABCs business?\\n[/USER]\",\n                userMessage: \"Can you speculate on the potential impact of a recession on ABCs business?\"\n            } as OffTopicContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Off-topic analysis: The message is off-topic as it requests speculation about future business impacts, which is not appropriate for investor relations communication.\",\n                success: true,\n                data: {\n                    response: \"off-topic\"\n                }\n            } as OffTopicContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_OFFTOPIC\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_OFFTOPIC action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as OffTopicContent;\n\n            if (!content.text) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"text content is required\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_OFFTOPIC\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_OFFTOPIC action\");\n\n        try {\n            const messageContent = message.content as OffTopicContent;\n            console.log(\"Debug - Message content:\", {\n                hasText: !!messageContent?.text,\n                hasUserMessage: !!messageContent?.userMessage\n            });\n\n            const config = await validateNvidiaNimConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\n                env: config.NVIDIA_NIM_ENV\n            });\n\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\n            console.log(\"Debug - Network config:\", {\n                hasBaseUrl: !!networkConfig?.baseUrl,\n                baseUrl: networkConfig?.baseUrl\n            });\n\n            // Parse the prompt using our helper\n            const { systemContent, userContent } = parseOffTopicPrompt(\n                messageContent.text,\n                config.NVIDIA_OFFTOPIC_SYSTEM || \"\",\n                messageContent.userMessage || config.NVIDIA_OFFTOPIC_USER || \"\"\n            );\n\n            console.log(\"Debug - Parsed content:\", {\n                hasSystemContent: !!systemContent,\n                hasUserContent: !!userContent\n            });\n\n            // Initialize OpenAI client with NVIDIA configuration\n            const openai = new OpenAI({\n                apiKey: config.NVIDIA_NIM_API_KEY,\n                baseURL: networkConfig.baseUrl\n            });\n\n            // ------------------------------------------------------------------------------------------------\n            // Core off-topic analysis logic\n            // ------------------------------------------------------------------------------------------------\n            logGranular(\"Making request to NVIDIA NIM API\", {\n                model: \"nvidia/llama-3.1-nemoguard-8b-topic-control\",\n                systemContent,\n                userContent\n            });\n\n            try {\n                const messages: ChatCompletionMessageParam[] = [\n                    {\n                        role: \"system\",\n                        content: systemContent\n                    },\n                    {\n                        role: \"user\",\n                        content: userContent\n                    }\n                ];\n\n                const completion = await openai.chat.completions.create({\n                    model: \"nvidia/llama-3.1-nemoguard-8b-topic-control\",\n                    messages,\n                    temperature: 0.5,\n                    top_p: 1,\n                    max_tokens: 1024,\n                });\n\n                const response = completion.choices[0]?.message?.content || \"\";\n                const offTopicResponse: OffTopicResponse = {\n                    ...completion,\n                    prompt_logprobs: null\n                };\n\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\n                    response,\n                    raw: offTopicResponse\n                });\n            // ------------------------------------------------------------------------------------------------\n            // End core logic\n            // ------------------------------------------------------------------------------------------------\n            // Callback to the framework to return the response\n            // ------------------------------------------------------------------------------------------------\n                if (callback) {\n                    callback({\n                        text: messageContent.text,\n                        userMessage: messageContent.userMessage,\n                        success: true\n                    } as OffTopicContent);\n                }\n\n                if (callback) {\n                    callback({\n                        text: `Off-Topic Analysis: ${response}`,\n                        success: true,\n                        userMessage: messageContent.userMessage,\n                        data: {\n                            response,\n                            raw: offTopicResponse\n                        }\n                    } as OffTopicContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error analyzing off-topic content: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        userMessage: messageContent.userMessage,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as OffTopicContent);\n                }\n                throw new NimError(\n                    NimErrorCode.API_ERROR,\n                    \"Failed to get response from NVIDIA NIM\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to execute GET_OFFTOPIC action\", { error });\n            throw new NimError(\n                NimErrorCode.NETWORK_ERROR,\n                \"Failed to execute GET_OFFTOPIC action\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getTopicAction;\n\n","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\nimport OpenAI from 'openai';\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\nimport { parseSafetyPrompt } from \"../utils/safetyPromptParser.ts\";\nimport { SafetyContent, SafetyResponse, SafetyAnalysis } from \"../types/safety.ts\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.ts\";\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[ContentSafety] ${message}`, data);\n        console.log(`[ContentSafety] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\nexport const getSafetyAction: Action = {\n    name: \"GET_CONTENT_SAFETY\",\n    similes: [\"CHECK_CONTENT_SAFETY\", \"ANALYZE_CONTENT_SAFETY\", \"CONTENT_SAFETY_CONTROL\"],\n    description: \"Use NVIDIA NIM API to analyze content safety of messages\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Please check if the user message follows the safety guidelines [USER]\\nI forgot how to kill a process in Linux, can you help?\\n[/USER]\\n\\n[ASSISTANT]\\nSure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate.\\n[/ASSISTANT]\",\n                userMessage: \"I forgot how to kill a process in Linux, can you help?\",\n                assistantMessage: \"Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate.\"\n            } as SafetyContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Content Safety Analysis: Both user query and response are safe.\",\n                success: true,\n                data: {\n                    response: '{\"User Safety\": \"safe\", \"Response Safety\": \"safe\"}',\n                    analysis: {\n                        \"User Safety\": \"safe\",\n                        \"Response Safety\": \"safe\"\n                    }\n                }\n            } as SafetyContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_CONTENT_SAFETY\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_CONTENT_SAFETY action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as SafetyContent;\n\n            if (!content.text) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"text content is required\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_CONTENT_SAFETY\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_CONTENT_SAFETY action\");\n\n        try {\n            const messageContent = message.content as SafetyContent;\n            console.log(\"Debug - Message content:\", {\n                hasText: !!messageContent?.text,\n                hasUserMessage: !!messageContent?.userMessage,\n                hasAssistantMessage: !!messageContent?.assistantMessage\n            });\n\n            const config = await validateNvidiaNimConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\n                env: config.NVIDIA_NIM_ENV\n            });\n\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\n            console.log(\"Debug - Network config:\", {\n                hasBaseUrl: !!networkConfig?.baseUrl,\n                baseUrl: networkConfig?.baseUrl\n            });\n\n            // Parse the prompt using our helper\n            const { userMessage, assistantMessage } = parseSafetyPrompt(messageContent.text);\n            console.log(\"Debug - Parsed content:\", {\n                hasUserMessage: !!userMessage,\n                hasAssistantMessage: !!assistantMessage,\n                userMessageLength: userMessage?.length,\n                assistantMessageLength: assistantMessage?.length\n            });\n\n            // Initialize OpenAI client with NVIDIA configuration\n            const openai = new OpenAI({\n                apiKey: config.NVIDIA_NIM_API_KEY,\n                baseURL: networkConfig.baseUrl\n            });\n\n            // ------------------------------------------------------------------------------------------------\n            // Core content safety analysis logic\n            // ------------------------------------------------------------------------------------------------\n            logGranular(\"Making request to NVIDIA NIM API\", {\n                model: \"nvidia/llama-3.1-nemoguard-8b-content-safety\",\n                userMessage,\n                assistantMessage\n            });\n\n            try {\n                const messages: ChatCompletionMessageParam[] = [\n                    {\n                        role: \"user\",\n                        content: userMessage\n                    }\n                ];\n\n                if (assistantMessage) {\n                    messages.push({\n                        role: \"assistant\",\n                        content: assistantMessage\n                    });\n                }\n\n                const completion = await openai.chat.completions.create({\n                    model: \"nvidia/llama-3.1-nemoguard-8b-content-safety\",\n                    messages,\n                    temperature: 0.5,\n                    top_p: 1,\n                    max_tokens: 1024,\n                });\n\n                const response = completion.choices[0]?.message?.content || \"\";\n                const safetyResponse: SafetyResponse = {\n                    ...completion,\n                    prompt_logprobs: null\n                };\n\n                // Parse the JSON response\n                let analysis: SafetyAnalysis | undefined;\n                try {\n                    analysis = JSON.parse(response) as SafetyAnalysis;\n                } catch (error) {\n                    throw new NimError(\n                        NimErrorCode.PARSE_ERROR,\n                        \"Failed to parse safety analysis response\",\n                        ErrorSeverity.HIGH,\n                        { response }\n                    );\n                }\n\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\n                    response,\n                    analysis,\n                    raw: safetyResponse\n                });\n            // ------------------------------------------------------------------------------------------------\n            // End core logic\n            // ------------------------------------------------------------------------------------------------\n\n                if (callback) {\n                    const safetyStatus = analysis?.[\"User Safety\"] === \"safe\" && analysis?.[\"Response Safety\"] === \"safe\"\n                        ? \"Both user query and response are safe\"\n                        : \"Safety concerns detected\";\n\n                    callback({\n                        text: `Content Safety Analysis: ${safetyStatus}`,\n                        success: true,\n                        userMessage,\n                        assistantMessage,\n                        data: {\n                            response,\n                            analysis,\n                            raw: safetyResponse\n                        }\n                    } as SafetyContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error analyzing content safety: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        userMessage,\n                        assistantMessage,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as SafetyContent);\n                }\n                throw new NimError(\n                    NimErrorCode.API_ERROR,\n                    \"Failed to get response from NVIDIA NIM\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to execute GET_CONTENT_SAFETY action\", { error });\n            throw new NimError(\n                NimErrorCode.NETWORK_ERROR,\n                \"Failed to execute GET_CONTENT_SAFETY action\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getSafetyAction;\n\n","interface SafetyParsedPrompt {\n    userMessage: string;\n    assistantMessage?: string;\n}\n\n/**\n * Parses a prompt string to extract user and assistant messages for safety analysis\n * Format expected:\n * [USER]\n * User message here...\n * [/USER]\n *\n * [ASSISTANT]\n * Assistant message here...\n * [/ASSISTANT]\n */\nexport function parseSafetyPrompt(prompt: string): SafetyParsedPrompt {\n    const userMatch = prompt.match(/\\[USER\\]([\\s\\S]*?)\\[\\/USER\\]/);\n    const assistantMatch = prompt.match(/\\[ASSISTANT\\]([\\s\\S]*?)\\[\\/ASSISTANT\\]/);\n\n    if (!userMatch) {\n        throw new Error(\"User message is required in the prompt\");\n    }\n\n    return {\n        userMessage: userMatch[1].trim(),\n        assistantMessage: assistantMatch ? assistantMatch[1].trim() : undefined\n    };\n}\n\n/**\n * Creates a formatted safety prompt string\n */\nexport function createSafetyPrompt(userMessage: string, assistantMessage?: string): string {\n    let prompt = `[USER]\n${userMessage}\n[/USER]`;\n\n    if (assistantMessage) {\n        prompt += `\\n\\n[ASSISTANT]\n${assistantMessage}\n[/ASSISTANT]`;\n    }\n\n    return prompt;\n}","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\nimport OpenAI from 'openai';\nimport type { ChatCompletionMessageParam } from \"openai/resources/chat/completions\";\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.ts\";\nimport { parseJailbreakPrompt } from \"../utils/jailbreakPromptParser.ts\";\nimport { JailbreakContent, JailbreakResponse, JailbreakAnalysis } from \"../types/jailbreak.ts\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.ts\";\nimport axios from 'axios';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[JailbreakDetection] ${message}`, data);\n        console.log(`[JailbreakDetection] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\nexport const getJailBreakAction: Action = {\n    name: \"GET_JAILBREAK\",\n    similes: [\"CHECK_JAILBREAK\", \"ANALYZE_JAILBREAK\", \"JAILBREAK_CONTROL\"],\n    description: \"Use NVIDIA NIM API to detect potential jailbreak attempts in prompts\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Analyze this prompt for potential jailbreak attempts [PROMPT]\\nWhat is the capital of France?\\n[/PROMPT]\",\n                inputPrompt: \"What is the capital of France?\"\n            } as JailbreakContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Jailbreak Analysis: No jailbreak attempt detected.\",\n                success: true,\n                data: {\n                    response: '{\"jailbreak\": \"false\", \"score\": \"0.0123456789\"}',\n                    analysis: {\n                        jailbreak: \"false\",\n                        score: \"0.0123456789\"\n                    }\n                }\n            } as JailbreakContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_JAILBREAK\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_JAILBREAK action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as JailbreakContent;\n\n            if (!content.text) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"text content is required\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_JAILBREAK\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_JAILBREAK action\");\n\n        try {\n            const messageContent = message.content as JailbreakContent;\n            console.log(\"Debug - Message content:\", {\n                hasText: !!messageContent?.text,\n                hasInputPrompt: !!messageContent?.inputPrompt\n            });\n\n            const config = await validateNvidiaNimConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\n                env: config.NVIDIA_NIM_ENV\n            });\n\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\n            console.log(\"Debug - Network config:\", {\n                hasBaseUrl: !!networkConfig?.baseUrl,\n                baseUrl: networkConfig?.baseUrl\n            });\n\n            // Parse the prompt using our helper\n            const { inputPrompt } = parseJailbreakPrompt(messageContent.text);\n            console.log(\"Debug - Parsed content:\", {\n                hasInputPrompt: !!inputPrompt,\n                promptLength: inputPrompt?.length\n            });\n\n            // Initialize OpenAI client with NVIDIA configuration\n            const openai = new OpenAI({\n                apiKey: config.NVIDIA_NIM_API_KEY,\n                baseURL: networkConfig.baseUrl\n            });\n\n            // ------------------------------------------------------------------------------------------------\n            // Core jailbreak detection logic\n            // ------------------------------------------------------------------------------------------------\n            logGranular(\"Making request to NVIDIA NIM API\", {\n                model: \"nvidia/nemoguard-jailbreak-detect\",\n                inputPrompt\n            });\n\n            try {\n                const messages: ChatCompletionMessageParam[] = [\n                    {\n                        role: \"user\",\n                        content: inputPrompt\n                    }\n                ];\n\n                // Make the API request\n                const { data: response } = await axios.post(\n                    'https://ai.api.nvidia.com/v1/security/nvidia/nemoguard-jailbreak-detect',\n                    {\n                        input: inputPrompt\n                    },\n                    {\n                        headers: {\n                            \"Authorization\": `Bearer ${config.NVIDIA_NIM_API_KEY}`,\n                            \"Accept\": \"application/json\",\n                            \"Content-Type\": \"application/json\"\n                        }\n                    }\n                );\n\n                // The response is already a JavaScript object, no need to parse\n                const analysis: JailbreakAnalysis = {\n                    jailbreak: response.jailbreak.toString(),\n                    score: response.score.toString()\n                };\n\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\n                    response,\n                    analysis\n                });\n\n                if (callback) {\n                    const jailbreakStatus = response.jailbreak\n                        ? \"Potential jailbreak attempt detected\"\n                        : \"No jailbreak attempt detected\";\n\n                    const score = (response.score * 100).toFixed(2);\n                    const scoreText = response.jailbreak\n                        ? `Jailbreak confidence: ${score}%`\n                        : `Safe with ${score}% confidence`;\n\n                    callback({\n                        text: `Jailbreak Analysis: ${jailbreakStatus}. ${scoreText}`,\n                        success: true,\n                        inputPrompt,\n                        data: {\n                            response: JSON.stringify(response),\n                            analysis,\n                            raw: response\n                        }\n                    } as JailbreakContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error analyzing jailbreak: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        inputPrompt,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as JailbreakContent);\n                }\n                throw new NimError(\n                    NimErrorCode.API_ERROR,\n                    \"Failed to get response from NVIDIA NIM\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to execute GET_JAILBREAK action\", { error });\n            throw new NimError(\n                NimErrorCode.NETWORK_ERROR,\n                \"Failed to execute GET_JAILBREAK action\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getJailBreakAction;\n\n","interface JailbreakParsedPrompt {\n    inputPrompt: string;\n}\n\n/**\n * Parses a prompt string to extract the input prompt for jailbreak detection\n * Format expected:\n * [PROMPT]\n * Input prompt text here...\n * [/PROMPT]\n */\nexport function parseJailbreakPrompt(prompt: string): JailbreakParsedPrompt {\n    const promptMatch = prompt.match(/\\[PROMPT\\]([\\s\\S]*?)\\[\\/PROMPT\\]/);\n\n    if (!promptMatch) {\n        // If no explicit prompt markers, treat the entire text as the prompt\n        return {\n            inputPrompt: prompt.trim()\n        };\n    }\n\n    return {\n        inputPrompt: promptMatch[1].trim()\n    };\n}\n\n/**\n * Creates a formatted jailbreak detection prompt string\n */\nexport function createJailbreakPrompt(inputPrompt: string): string {\n    return `[PROMPT]\n${inputPrompt}\n[/PROMPT]`;\n}","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample } from \"@elizaos/core\";\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\nimport { parseCosmosPrompt } from \"../utils/cosmosPromptParser.js\";\nimport { CosmosContent, CosmosResponse, CosmosAnalysis } from \"../types/cosmos.js\";\nimport { AssetManager } from \"../utils/assetManager.js\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\nimport path from 'path';\nimport axios from 'axios';\nimport fs from 'fs';\n\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[CosmosVision] ${message}`, data);\n        console.log(`[CosmosVision] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\n// Get URLs from environment config\nconst invoke_url = config.NVIDIA_COSMOS_INVOKE_URL || \"https://ai.api.nvidia.com/v1/vlm/nvidia/cosmos-nemotron-34b\";\nconst kNvcfAssetUrl = config.NVIDIA_COSMOS_ASSET_URL || \"https://api.nvcf.nvidia.com/v2/nvcf/assets\";\n\n// Get API key with proper error handling\nfunction getApiKey(config: any): string {\n    const apiKey = config.NVIDIA_NIM_API_KEY || process.env.TEST_NVCF_API_KEY;\n    if (!apiKey) {\n        throw new NimError(\n            NimErrorCode.VALIDATION_FAILED,\n            \"API key is missing. Please set NVIDIA_NIM_API_KEY or TEST_NVCF_API_KEY.\",\n            ErrorSeverity.HIGH\n        );\n    }\n    return apiKey;\n}\n\n// Type definitions for supported formats\ntype SupportedExtension = 'png' | 'jpg' | 'jpeg' | 'mp4';\ntype MediaInfo = [string, string]; // [mimeType, mediaType]\n\nconst kSupportedList: Record<SupportedExtension, MediaInfo> = {\n    \"png\": [\"image/png\", \"img\"],\n    \"jpg\": [\"image/jpg\", \"img\"],\n    \"jpeg\": [\"image/jpeg\", \"img\"],\n    \"mp4\": [\"video/mp4\", \"video\"]\n} as const;\n\n// Get file extension\nfunction getExtension(filename: string): string {\n    const ext = path.extname(filename).toLowerCase();\n    return ext.slice(1); // remove the leading dot\n}\n\n// Get MIME type\nfunction mimeType(ext: SupportedExtension): string {\n    return kSupportedList[ext][0];\n}\n\n// Get media type\nfunction mediaType(ext: SupportedExtension): string {\n    return kSupportedList[ext][1];\n}\n\nexport const getCosmosDescriptionAction: Action = {\n    name: \"GET_COSMOS_DESCRIPTION\",\n    similes: [\"CHECK_COSMOS_DESCRIPTION\", \"ANALYZE_COSMOS_DESCRIPTION\", \"COSMOS_DESCRIPTION_CONTROL\"],\n    description: \"Use NVIDIA Cosmos model to analyze and describe images or videos\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Analyze this image with the NVIDIA Cosmos [MEDIA]\\nsample.jpg\\n[/MEDIA]\\n[QUERY]\\nDescribe what's happening in this image\\n[/QUERY]\",\n                mediaPath: \"sample.jpg\"\n            } as CosmosContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"Scene Analysis: A person wearing a hard hat and safety vest is working in an industrial setting.\",\n                success: true,\n                data: {\n                    response: \"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.\",\n                    analysis: {\n                        description: \"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.\",\n                        confidence: 0.92\n                    }\n                }\n            } as CosmosContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_COSMOS_DESCRIPTION\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_COSMOS_DESCRIPTION action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as CosmosContent;\n\n            if (!content.text) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"text content is required\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_COSMOS_DESCRIPTION\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_COSMOS_DESCRIPTION action\");\n\n        try {\n            const messageContent = message.content as CosmosContent;\n            const config = await validateNvidiaNimConfig(runtime);\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\n            const apiKey = getApiKey(config);\n\n            logGranular(\"API key configuration\", {\n                hasKey: !!apiKey,\n                length: apiKey?.length,\n                source: config.NVIDIA_NIM_API_KEY ? 'config' : process.env.TEST_NVCF_API_KEY ? 'env' : 'default'\n            });\n\n            // Parse the prompt using our helper\n            const parsedPrompt = await parseCosmosPrompt(messageContent.text);\n            logGranular(\"Parsed prompt\", parsedPrompt);\n\n            if (!parsedPrompt.mediaFile) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"No media file provided in the prompt\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            // Initialize asset manager\n            const assetManager = new AssetManager(config.NVIDIA_NIM_API_KEY);\n\n            // ------------------------------------------------------------------------------------------------\n            // Core Cosmos vision analysis logic\n            // ------------------------------------------------------------------------------------------------\n            logGranular(\"Making request to NVIDIA NIM API\", {\n                model: \"nvidia/cosmos-nemotron-34b\",\n                query: parsedPrompt.query,\n                mediaFile: parsedPrompt.mediaFile,\n                isVideo: parsedPrompt.isVideo,\n                isImage: parsedPrompt.isImage\n            });\n\n            console.log(\"Debug - Network config\", {\n                baseVisionUrl: networkConfig.baseVisionUrl\n            });\n\n            try {\n                // Handle the media file using new Cosmos-specific methods\n                let mediaPath;\n                if (parsedPrompt.isVideo) {\n                    logGranular(\"Processing video file\", {\n                        originalPath: parsedPrompt.mediaFile,\n                        type: 'video'\n                    });\n                    mediaPath = await assetManager.handleVideosCosmos(parsedPrompt.mediaFile);\n                    logGranular(\"Video file processed\", {\n                        originalPath: parsedPrompt.mediaFile,\n                        processedPath: mediaPath\n                    });\n                } else if (parsedPrompt.isImage) {\n                    logGranular(\"Processing image file\", {\n                        originalPath: parsedPrompt.mediaFile,\n                        type: 'image'\n                    });\n                    mediaPath = await assetManager.handleImagesCosmos(parsedPrompt.mediaFile);\n                    logGranular(\"Image file processed\", {\n                        originalPath: parsedPrompt.mediaFile,\n                        processedPath: mediaPath\n                    });\n                } else {\n                    // Use the general handler if type is not specified\n                    const cosmosDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\n                    logGranular(\"Processing media file using general handler\", {\n                        originalPath: parsedPrompt.mediaFile,\n                        targetDir: cosmosDir\n                    });\n                    mediaPath = await assetManager.handleChatUploadCosmos(parsedPrompt.mediaFile, cosmosDir);\n                    logGranular(\"Media file processed using general handler\", {\n                        originalPath: parsedPrompt.mediaFile,\n                        processedPath: mediaPath\n                    });\n                }\n\n                logGranular(\"Processing file extension\", {\n                    mediaPath,\n                    fullPath: path.resolve(mediaPath)\n                });\n\n                const ext = path.extname(mediaPath).toLowerCase().slice(1) as SupportedExtension;\n                if (!(ext in kSupportedList)) {\n                    const error = `Unsupported file extension: ${ext}`;\n                    logGranular(\"File extension error\", {\n                        ext,\n                        supportedExtensions: Object.keys(kSupportedList)\n                    });\n                    throw new Error(error);\n                }\n\n                logGranular(\"File extension validated\", {\n                    ext,\n                    mimeType: kSupportedList[ext][0],\n                    mediaType: kSupportedList[ext][1]\n                });\n\n                const dataInput = fs.readFileSync(mediaPath);\n                logGranular(\"File read\", {\n                    size: dataInput.length,\n                    mediaPath\n                });\n\n                const description = \"Reference media file\";\n\n                // First API call to authorize asset upload - exact same as nvidia.ts\n                const headers = {\n                    \"Authorization\": `Bearer ${apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                };\n\n                const postData = {\n                    contentType: kSupportedList[ext][0],\n                    description: description\n                };\n\n                logGranular(\"Initiating asset upload authorization\", {\n                    headers: {\n                        ...headers,\n                        \"Authorization\": \"Bearer [REDACTED]\"\n                    },\n                    postData\n                });\n\n                const { data: authorizeRes } = await axios.post(kNvcfAssetUrl, postData, { headers });\n\n                logGranular(\"Asset upload authorized\", {\n                    uploadUrl: authorizeRes.uploadUrl,\n                    assetId: authorizeRes.assetId\n                });\n\n                // Second API call to upload the file - exact same as nvidia.ts\n                const uploadHeaders = {\n                    \"x-amz-meta-nvcf-asset-description\": description,\n                    \"content-type\": kSupportedList[ext][0]\n                };\n\n                logGranular(\"Uploading file to authorized URL\", {\n                    uploadUrl: authorizeRes.uploadUrl,\n                    headers: uploadHeaders,\n                    fileSize: dataInput.length\n                });\n\n                const uploadResponse = await axios.put(authorizeRes.uploadUrl, dataInput, {\n                    headers: uploadHeaders\n                });\n\n                if (uploadResponse.status !== 200) {\n                    const error = `Asset upload failed: ${authorizeRes.assetId}`;\n                    logGranular(\"Upload failed\", {\n                        status: uploadResponse.status,\n                        assetId: authorizeRes.assetId,\n                        response: uploadResponse.data\n                    });\n                    throw new Error(error);\n                }\n\n                const assetId = authorizeRes.assetId;\n                logGranular(\"Asset upload successful\", {\n                    assetId,\n                    status: uploadResponse.status\n                });\n\n                // Construct media content exactly as in nvidia.ts\n                const mediaContent = `<${kSupportedList[ext][1]} src=\"data:${kSupportedList[ext][0]};asset_id,${assetId}\" />`;\n                const promptContent = `${parsedPrompt.query || 'Describe this'} ${mediaContent}`;\n\n                logGranular(\"Constructed media content\", {\n                    mediaContent,\n                    fullPrompt: promptContent\n                });\n\n                const messages = [{\n                    role: \"user\",\n                    content: promptContent\n                }];\n\n                // Headers exactly as in nvidia.ts\n                const inferHeaders = {\n                    \"Authorization\": `Bearer ${apiKey}`,\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\",\n                    \"NVCF-INPUT-ASSET-REFERENCES\": assetId,\n                    \"NVCF-FUNCTION-ASSET-IDS\": assetId\n                };\n\n                const payload = {\n                    max_tokens: 1024,\n                    temperature: 0.2,\n                    top_p: 0.7,\n                    seed: 50,\n                    num_frames_per_inference: 8,\n                    messages: messages,\n                    stream: false,\n                    model: \"nvidia/vila\"\n                };\n\n                logGranular(\"Preparing Cosmos API request\", {\n                    url: invoke_url,\n                    headers: {\n                        ...inferHeaders,\n                        \"Authorization\": \"Bearer [REDACTED]\"\n                    },\n                    payload: {\n                        ...payload,\n                        messages: messages\n                    }\n                });\n\n                const response = await axios.post(\n                    invoke_url,\n                    payload,\n                    { headers: inferHeaders }\n                );\n\n                logGranular(\"Received Cosmos API response\", {\n                    status: response.status,\n                    headers: response.headers,\n                    data: response.data\n                });\n\n                // Clean up the asset - exact same as nvidia.ts\n                logGranular(\"Initiating asset cleanup\", { assetId });\n\n                await axios.delete(`${kNvcfAssetUrl}/${assetId}`, {\n                    headers: {\n                        \"Authorization\": `Bearer ${apiKey}`\n                    }\n                });\n\n                logGranular(\"Asset cleanup completed\", { assetId });\n\n                const responseText = response.data.choices[0]?.message?.content || \"\";\n                const cosmosResponse = {\n                    ...response.data,\n                    prompt_logprobs: null\n                };\n\n                const analysis: CosmosAnalysis = {\n                    description: responseText,\n                    confidence: 0.92\n                };\n\n                logGranular(\"Processing complete\", {\n                    responseLength: responseText.length,\n                    success: true,\n                    assetId\n                });\n\n                if (callback) {\n                    callback({\n                        text: `Scene Analysis: ${responseText}`,\n                        success: true,\n                        mediaPath,\n                        data: {\n                            response: responseText,\n                            analysis,\n                            raw: cosmosResponse,\n                            assetId\n                        }\n                    } as CosmosContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error analyzing media: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        mediaPath: parsedPrompt.mediaFile,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as CosmosContent);\n                }\n                throw new NimError(\n                    NimErrorCode.API_ERROR,\n                    \"Failed to get response from NVIDIA NIM\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to execute GET_COSMOS_DESCRIPTION action\", { error });\n            throw new NimError(\n                NimErrorCode.NETWORK_ERROR,\n                \"Failed to execute GET_COSMOS_DESCRIPTION action\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getCosmosDescriptionAction;\n\n","import fs from 'fs';\nimport path from 'path';\nimport axios from 'axios';\nimport { MediaType, MediaAsset } from '../types/cosmos.js';\nimport { NimError, NimErrorCode, ErrorSeverity } from '../errors/nimErrors.js';\n\nconst SUPPORTED_FORMATS = {\n    \"png\": [\"image/png\", \"img\"],\n    \"jpg\": [\"image/jpg\", \"img\"],\n    \"jpeg\": [\"image/jpeg\", \"img\"],\n    \"mp4\": [\"video/mp4\", \"video\"]\n} as const;\n\nconst ASSETS_DIR = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\nconst NVCF_ASSET_URL = 'https://api.nvcf.nvidia.com/v2/nvcf/assets';\n\nexport class AssetManager {\n    private apiKey: string;\n\n    constructor(apiKey: string) {\n        this.apiKey = apiKey;\n    }\n\n    /**\n     * Get the absolute path to the assets directory\n     */\n    private getAssetsPath(): string {\n        // Try to find the assets directory relative to the current working directory\n        let currentDir = process.cwd();\n        let assetsPath = path.join(currentDir, ASSETS_DIR);\n\n        // If not found, try parent directories\n        while (!fs.existsSync(assetsPath) && currentDir !== path.parse(currentDir).root) {\n            currentDir = path.dirname(currentDir);\n            assetsPath = path.join(currentDir, ASSETS_DIR);\n        }\n\n        if (!fs.existsSync(assetsPath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                \"Assets directory not found\",\n                ErrorSeverity.HIGH\n            );\n        }\n\n        return assetsPath;\n    }\n\n    /**\n     * Get file information\n     */\n    private getFileInfo(filePath: string): { ext: string; mimeType: string; type: MediaType } {\n        const ext = path.extname(filePath).toLowerCase().slice(1);\n        if (!(ext in SUPPORTED_FORMATS)) {\n            throw new NimError(\n                NimErrorCode.VALIDATION_FAILED,\n                `Unsupported file format: ${ext}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        const [mimeType, type] = SUPPORTED_FORMATS[ext as keyof typeof SUPPORTED_FORMATS];\n        return { ext, mimeType, type: type as MediaType };\n    }\n\n    /**\n     * Check if a string is a valid URL\n     */\n    private isValidUrl(urlString: string): boolean {\n        try {\n            new URL(urlString);\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    /**\n     * Download a file from a URL and save it to the assets directory\n     */\n    async downloadFromUrl(url: string): Promise<string> {\n        if (!this.isValidUrl(url)) {\n            throw new NimError(\n                NimErrorCode.VALIDATION_FAILED,\n                \"Invalid URL provided\",\n                ErrorSeverity.HIGH\n            );\n        }\n\n        try {\n            const response = await axios.get(url, {\n                responseType: 'arraybuffer',\n                headers: {\n                    'Accept': Object.values(SUPPORTED_FORMATS).map(([mime]) => mime).join(', ')\n                }\n            });\n\n            const contentType = response.headers['content-type'];\n            const extension = Object.entries(SUPPORTED_FORMATS)\n                .find(([_, [mime]]) => mime === contentType)?.[0];\n\n            if (!extension) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    `Unsupported content type: ${contentType}`,\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            const assetsPath = this.getAssetsPath();\n            const filename = `download_${Date.now()}.${extension}`;\n            const filePath = path.join(assetsPath, filename);\n\n            await fs.promises.writeFile(filePath, response.data);\n            return filename;\n        } catch (error) {\n            if (error instanceof NimError) throw error;\n            throw new NimError(\n                NimErrorCode.DOWNLOAD_ERROR,\n                \"Failed to download media file\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Get or download media file\n     * If the input is a URL, downloads it and returns the local path\n     * If the input is a local file, validates it exists and returns the path\n     */\n    async getOrDownloadMedia(mediaInput: string): Promise<string> {\n        if (this.isValidUrl(mediaInput)) {\n            return this.downloadFromUrl(mediaInput);\n        }\n\n        // If not a URL, treat as local file\n        const assetsPath = this.getAssetsPath();\n        const filePath = path.join(assetsPath, mediaInput);\n\n        if (!fs.existsSync(filePath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                `Media file not found: ${mediaInput}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        return mediaInput;\n    }\n\n    /**\n     * Upload a media file to NVIDIA's asset service\n     */\n    async uploadAsset(filePath: string, description: string = \"Reference media file\"): Promise<MediaAsset> {\n        const { mimeType, type } = this.getFileInfo(filePath);\n        const fileData = fs.readFileSync(filePath);\n\n        // First API call to authorize asset upload\n        const headers = {\n            \"Authorization\": `Bearer ${this.apiKey}`,\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\"\n        };\n\n        try {\n            // Get upload URL\n            const { data: authorizeRes } = await axios.post(NVCF_ASSET_URL, {\n                contentType: mimeType,\n                description\n            }, { headers });\n\n            // Upload the file\n            await axios.put(authorizeRes.uploadUrl, fileData, {\n                headers: {\n                    \"x-amz-meta-nvcf-asset-description\": description,\n                    \"content-type\": mimeType\n                }\n            });\n\n            return {\n                assetId: authorizeRes.assetId,\n                type,\n                mimeType,\n                description\n            };\n        } catch (error) {\n            throw new NimError(\n                NimErrorCode.API_ERROR,\n                \"Failed to upload asset\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Delete an asset from NVIDIA's service\n     */\n    async deleteAsset(assetId: string): Promise<void> {\n        try {\n            await axios.delete(`${NVCF_ASSET_URL}/${assetId}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${this.apiKey}`\n                }\n            });\n        } catch (error) {\n            throw new NimError(\n                NimErrorCode.API_ERROR,\n                \"Failed to delete asset\",\n                ErrorSeverity.LOW,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Get a list of available media files in the assets directory\n     */\n    listAvailableMedia(): string[] {\n        const assetsPath = this.getAssetsPath();\n        return fs.readdirSync(assetsPath)\n            .filter(file => {\n                const ext = path.extname(file).toLowerCase().slice(1);\n                return ext in SUPPORTED_FORMATS;\n            })\n            .map(file => path.join(assetsPath, file));\n    }\n\n    /**\n     * Get the full path to a media file in the assets directory\n     */\n    getMediaPath(filename: string): string {\n        const assetsPath = this.getAssetsPath();\n        const filePath = path.join(assetsPath, filename);\n\n        if (!fs.existsSync(filePath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                `Media file not found: ${filename}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        return filePath;\n    }\n\n    /**\n     * Handle a file uploaded through chat\n     * This will copy the file to the appropriate assets directory and return the new path\n     */\n    async handleChatUpload(uploadPath: string, targetDir: string): Promise<string> {\n        if (!fs.existsSync(uploadPath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                `Upload file not found: ${uploadPath}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        console.log(\"Debug - AssetManager - Input paths:\", {\n            uploadPath,\n            targetDir,\n            cwd: process.cwd()\n        });\n\n        // Find workspace root\n        let workspaceRoot = process.cwd().replace('/agent', '');\n        while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n            workspaceRoot = path.dirname(workspaceRoot);\n        }\n\n        // Convert targetDir to absolute path if it's relative\n        const absoluteTargetDir = path.isAbsolute(targetDir)\n            ? targetDir\n            : path.join(workspaceRoot, targetDir);\n\n        console.log(\"Debug - AssetManager - Resolved paths:\", {\n            workspaceRoot,\n            absoluteTargetDir\n        });\n\n        // Ensure target directory exists\n        if (!fs.existsSync(absoluteTargetDir)) {\n            fs.mkdirSync(absoluteTargetDir, { recursive: true });\n        }\n\n        // Generate a new filename with timestamp\n        const ext = path.extname(uploadPath);\n        const timestamp = Date.now();\n        const newFilename = `upload_${timestamp}${ext}`;\n        const newPath = path.join(absoluteTargetDir, newFilename);\n\n        console.log(\"Debug - AssetManager - File paths:\", {\n            newFilename,\n            newPath,\n            exists: fs.existsSync(uploadPath)\n        });\n\n        // Copy the file\n        try {\n            await fs.promises.copyFile(uploadPath, newPath);\n            console.log(\"Debug - AssetManager - File copied successfully:\", {\n                from: uploadPath,\n                to: newPath\n            });\n            return newPath;\n        } catch (error) {\n            throw new NimError(\n                NimErrorCode.FILE_OPERATION_FAILED,\n                `Failed to copy upload file: ${error instanceof Error ? error.message : String(error)}`,\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Handle image files for Cosmos\n     * This includes validation, copying, and path management specific to Cosmos images\n     */\n    async handleImagesCosmos(uploadPath: string): Promise<string> {\n        console.log(\"Debug - AssetManager - Handling Cosmos image:\", {\n            uploadPath,\n            type: 'image'\n        });\n\n        // Find workspace root\n        let workspaceRoot = process.cwd().replace('/agent', '');\n        while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n            workspaceRoot = path.dirname(workspaceRoot);\n        }\n\n        // Set up Cosmos image directory\n        const cosmosImageDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos', 'images');\n        const cosmosTempDir = path.join(cosmosImageDir, 'temp');\n\n        // Ensure directories exist\n        if (!fs.existsSync(cosmosImageDir)) {\n            fs.mkdirSync(cosmosImageDir, { recursive: true });\n        }\n        if (!fs.existsSync(cosmosTempDir)) {\n            fs.mkdirSync(cosmosTempDir, { recursive: true });\n        }\n\n        // Validate file exists and is an image\n        if (!fs.existsSync(uploadPath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                `Image file not found: ${uploadPath}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        const ext = path.extname(uploadPath).toLowerCase();\n        if (!['.jpg', '.jpeg', '.png', '.gif'].includes(ext)) {\n            throw new NimError(\n                NimErrorCode.VALIDATION_FAILED,\n                `Invalid image format: ${ext}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        // Generate new filename and copy file\n        const timestamp = Date.now();\n        const newFilename = `cosmos_img_${timestamp}${ext}`;\n        const newPath = path.join(cosmosImageDir, newFilename);\n\n        try {\n            await fs.promises.copyFile(uploadPath, newPath);\n            console.log(\"Debug - AssetManager - Cosmos image processed:\", {\n                from: uploadPath,\n                to: newPath,\n                size: fs.statSync(newPath).size\n            });\n            return newPath;\n        } catch (error) {\n            throw new NimError(\n                NimErrorCode.FILE_OPERATION_FAILED,\n                `Failed to process Cosmos image: ${error instanceof Error ? error.message : String(error)}`,\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Handle video files for Cosmos\n     * This includes validation, copying, and path management specific to Cosmos videos\n     */\n    async handleVideosCosmos(uploadPath: string): Promise<string> {\n        console.log(\"Debug - AssetManager - Handling Cosmos video:\", {\n            uploadPath,\n            type: 'video'\n        });\n\n        // Find workspace root\n        let workspaceRoot = process.cwd().replace('/agent', '');\n        while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n            workspaceRoot = path.dirname(workspaceRoot);\n        }\n\n        // Set up Cosmos video directory\n        const cosmosVideoDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos', 'videos');\n        const cosmosTempDir = path.join(cosmosVideoDir, 'temp');\n\n        // Ensure directories exist\n        if (!fs.existsSync(cosmosVideoDir)) {\n            fs.mkdirSync(cosmosVideoDir, { recursive: true });\n        }\n        if (!fs.existsSync(cosmosTempDir)) {\n            fs.mkdirSync(cosmosTempDir, { recursive: true });\n        }\n\n        // Validate file exists and is a video\n        if (!fs.existsSync(uploadPath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                `Video file not found: ${uploadPath}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        const ext = path.extname(uploadPath).toLowerCase();\n        if (!['.mp4', '.avi', '.mov', '.webm'].includes(ext)) {\n            throw new NimError(\n                NimErrorCode.VALIDATION_FAILED,\n                `Invalid video format: ${ext}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        // Generate new filename and copy file\n        const timestamp = Date.now();\n        const newFilename = `cosmos_vid_${timestamp}${ext}`;\n        const newPath = path.join(cosmosVideoDir, newFilename);\n\n        try {\n            await fs.promises.copyFile(uploadPath, newPath);\n            console.log(\"Debug - AssetManager - Cosmos video processed:\", {\n                from: uploadPath,\n                to: newPath,\n                size: fs.statSync(newPath).size\n            });\n            return newPath;\n        } catch (error) {\n            throw new NimError(\n                NimErrorCode.FILE_OPERATION_FAILED,\n                `Failed to process Cosmos video: ${error instanceof Error ? error.message : String(error)}`,\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n\n    /**\n     * Updated handleChatUploadCosmos to use the new specialized handlers\n     */\n    async handleChatUploadCosmos(uploadPath: string, targetDir: string): Promise<string> {\n        if (!fs.existsSync(uploadPath)) {\n            throw new NimError(\n                NimErrorCode.FILE_NOT_FOUND,\n                `Upload file not found: ${uploadPath}`,\n                ErrorSeverity.HIGH\n            );\n        }\n\n        // Determine file type\n        const ext = path.extname(uploadPath).toLowerCase();\n        const isVideo = ['.mp4', '.avi', '.mov', '.webm'].includes(ext);\n        const isImage = ['.jpg', '.jpeg', '.png', '.gif'].includes(ext);\n\n        console.log(\"Debug - AssetManager - Cosmos upload type:\", {\n            path: uploadPath,\n            extension: ext,\n            isVideo,\n            isImage\n        });\n\n        // Handle based on file type\n        if (isVideo) {\n            return this.handleVideosCosmos(uploadPath);\n        } else if (isImage) {\n            return this.handleImagesCosmos(uploadPath);\n        } else {\n            throw new NimError(\n                NimErrorCode.VALIDATION_FAILED,\n                `Unsupported file type: ${ext}`,\n                ErrorSeverity.HIGH\n            );\n        }\n    }\n}","import { Media } from \"@elizaos/core\";\nimport { AssetManager } from \"./assetManager.js\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\nimport path from 'path';\nimport process from 'process';\nimport fs from 'fs';\n\n// Debug logging helper\nconst debugLog = (message: string, data?: unknown) => {\n    console.log(`Debug - Cosmos Parser - ${message}:`, data);\n};\n\nexport interface CosmosParsedPrompt {\n    mediaFile?: string;\n    query?: string;\n    isVideo: boolean;\n    isImage: boolean;\n    isBase64: boolean;\n}\n\n/**\n * Parse a prompt for Cosmos Vision processing\n * Supports both traditional [MEDIA]...[/MEDIA] format and direct file uploads\n */\nexport const parseCosmosPrompt = async (text?: string, attachments?: Media[], apiKey?: string): Promise<CosmosParsedPrompt> => {\n    debugLog(\"Input\", {\n        hasText: !!text,\n        textLength: text?.length,\n        attachmentCount: attachments?.length,\n        hasApiKey: !!apiKey\n    });\n\n    const result: CosmosParsedPrompt = {\n        isVideo: false,\n        isImage: false,\n        isBase64: false\n    };\n\n    // Get workspace root using the same logic as actionGetDeepFake.ts\n    let workspaceRoot = process.cwd().replace('/agent', '');\n    while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n        workspaceRoot = path.dirname(workspaceRoot);\n    }\n\n    debugLog(\"Workspace paths\", {\n        cwd: process.cwd(),\n        workspaceRoot,\n        hasPackagesDir: fs.existsSync(path.join(workspaceRoot, 'packages'))\n    });\n\n    if (!text && !attachments?.length) {\n        return result;\n    }\n\n    // Handle direct file uploads first\n    if (attachments?.length) {\n        const firstAttachment = attachments[0];\n        debugLog(\"First attachment\", {\n            id: firstAttachment.id,\n            contentType: firstAttachment.contentType,\n            url: firstAttachment.url\n        });\n\n        // Determine media type from content type\n        const contentType = firstAttachment.contentType || '';\n        const isVideo = contentType.startsWith('video/');\n        const isImage = contentType.startsWith('image/');\n\n        if (!isVideo && !isImage) {\n            throw new NimError(\n                NimErrorCode.VALIDATION_FAILED,\n                \"Unsupported media type. Only images and videos are supported.\",\n                ErrorSeverity.HIGH\n            );\n        }\n\n        // Use AssetManager to handle the upload\n        if (apiKey) {\n            const assetManager = new AssetManager(apiKey);\n            const uploadPath = firstAttachment.url;\n            const cosmosDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\n            const fullCosmosDir = path.join(workspaceRoot, cosmosDir);\n\n            debugLog(\"Upload paths\", {\n                uploadPath,\n                cosmosDir,\n                fullCosmosDir\n            });\n\n            try {\n                const newPath = await assetManager.handleChatUploadCosmos(uploadPath, cosmosDir);\n                result.mediaFile = path.basename(newPath);\n                result.isVideo = isVideo;\n                result.isImage = isImage;\n                result.isBase64 = false;\n\n                debugLog(\"Upload result\", {\n                    newPath,\n                    mediaFile: result.mediaFile\n                });\n            } catch (error) {\n                throw new NimError(\n                    NimErrorCode.FILE_OPERATION_FAILED,\n                    `Failed to process uploaded file: ${error instanceof Error ? error.message : String(error)}`,\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        }\n\n        // Extract query from text if present\n        if (text) {\n            const queryMatch = text.match(/\\[QUERY\\](.*?)\\[\\/QUERY\\]/s);\n            result.query = queryMatch ? queryMatch[1].trim() : text.trim();\n        }\n\n        return result;\n    }\n\n    // Handle text-based prompt with [MEDIA]...[/MEDIA] tags\n    if (text) {\n        const mediaMatch = text.match(/\\[MEDIA\\](.*?)\\[\\/MEDIA\\]/s);\n        const queryMatch = text.match(/\\[QUERY\\](.*?)\\[\\/QUERY\\]/s);\n\n        debugLog(\"Text matches\", {\n            hasMediaMatch: !!mediaMatch,\n            hasQueryMatch: !!queryMatch,\n            mediaContent: mediaMatch?.[1]?.trim(),\n            queryContent: queryMatch?.[1]?.trim()\n        });\n\n        if (mediaMatch) {\n            const mediaFile = mediaMatch[1].trim();\n            // Build the correct path for local files\n            const cosmosDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'cosmos');\n            const fullCosmosDir = path.join(workspaceRoot, cosmosDir);\n            const mediaPath = path.join(fullCosmosDir, mediaFile);\n\n            debugLog(\"Local file paths\", {\n                mediaFile,\n                cosmosDir,\n                fullCosmosDir,\n                mediaPath\n            });\n\n            result.mediaFile = mediaPath;\n\n            // Determine file type\n            const ext = path.extname(mediaFile).toLowerCase();\n            result.isVideo = ['.mp4', '.mov', '.avi', '.webm'].includes(ext);\n            result.isImage = ['.jpg', '.jpeg', '.png', '.gif', '.webp'].includes(ext);\n        }\n\n        if (queryMatch) {\n            result.query = queryMatch[1].trim();\n        }\n    }\n\n    debugLog(\"Result\", {\n        hasMediaFile: !!result.mediaFile,\n        isVideo: result.isVideo,\n        isImage: result.isImage,\n        isBase64: result.isBase64,\n        hasQuery: !!result.query,\n        fullPath: result.mediaFile\n    });\n\n    return result;\n}\n\n/**\n * Creates a formatted Cosmos prompt string\n */\nexport function createCosmosPrompt(mediaFile: string, query: string = \"Describe the scene\"): string {\n    return `[MEDIA]\n${mediaFile}\n[/MEDIA]\n[QUERY]\n${query}\n[/QUERY]`;\n}","import { Media } from \"@elizaos/core\";\nimport { AssetManager } from \"./assetManager.js\";\nimport path from 'path';\n\ninterface DeepFakeParsedPrompt {\n    mediaFile: string;\n    isBase64: boolean;\n}\n\ninterface MessageAttachment {\n    data: string;\n    type: string;\n    name?: string;\n}\n\n/**\n * Parses a prompt string to extract the media file for deepfake detection\n * Format expected either:\n * [IMAGE]\n * path/to/image/file\n * [/IMAGE]\n *\n * or\n *\n * [IMAGE]\n * data:image/jpeg;base64,...\n * [/IMAGE]\n *\n * or directly from message attachments\n */\nexport async function parseDeepFakePrompt(text: string, attachments?: Media[], apiKey?: string): Promise<DeepFakeParsedPrompt> {\n    // First check for attachments\n    if (attachments && attachments.length > 0) {\n        const imageAttachment = attachments[0];\n        if (!imageAttachment.url) {\n            throw new Error(\"Invalid media attachment: no URL found\");\n        }\n\n        // Handle the uploaded file\n        if (apiKey) {\n            const assetManager = new AssetManager(apiKey);\n            const deepfakeDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake');\n            const newPath = await assetManager.handleChatUpload(imageAttachment.url, deepfakeDir);\n\n            return {\n                mediaFile: path.basename(newPath),\n                isBase64: false\n            };\n        }\n\n        return {\n            mediaFile: imageAttachment.url,\n            isBase64: imageAttachment.url.startsWith('data:image')\n        };\n    }\n\n    // If no attachments, try to parse from text\n    const mediaMatch = text.match(/\\[IMAGE\\]([\\s\\S]*?)\\[\\/IMAGE\\]/);\n\n    if (!mediaMatch) {\n        throw new Error(\"Image file path or data is required\");\n    }\n\n    const mediaContent = mediaMatch[1].trim();\n    const isBase64 = mediaContent.startsWith('data:image');\n\n    return {\n        mediaFile: mediaContent,\n        isBase64\n    };\n}\n\n/**\n * Creates a formatted deepfake detection prompt string\n */\nexport function createDeepFakePrompt(mediaFile: string): string {\n    return `[IMAGE]\n${mediaFile}\n[/IMAGE]`;\n}","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample, Media } from \"@elizaos/core\";\nimport axios from 'axios';\nimport fs from 'fs';\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\nimport { parseDeepFakePrompt } from \"../utils/deepfakePromptParser.js\";\nimport { DeepFakeContent, DeepFakeResponse, DeepFakeAnalysis } from \"../types/deepfake.js\";\nimport { AssetManager } from \"../utils/assetManager.js\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\nimport path from 'path';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[DeepFakeDetection] ${message}`, data);\n        console.log(`[DeepFakeDetection] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface ApiHeaders {\n    Authorization: string;\n    Accept: string;\n    'Content-Type'?: string;\n    'NVCF-INPUT-ASSET-REFERENCES'?: string;\n    [key: string]: string | undefined;\n}\n\nexport const getDeepFakeAction: Action = {\n    name: \"GET_DEEP_FAKE\",\n    similes: [\"CHECK_DEEP_FAKE\", \"ANALYZE_DEEP_FAKE\", \"DEEP_FAKE_CONTROL\"],\n    description: \"Use NVIDIA DeepFake detection model to analyze images for potential manipulation\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Check if this image is a deepfake please[IMAGE]\\ntest_image.jpg\\n[/IMAGE]\",\n                mediaPath: \"test_image.jpg\"\n            } as DeepFakeContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"DeepFake Analysis: Image contains 1 face(s). Face #1: 99.82% likely to be a deepfake.\",\n                success: true,\n                data: {\n                    response: \"Detected potential manipulation in the image\",\n                    analysis: [{\n                        index: 0,\n                        bounding_boxes: [{\n                            vertices: [\n                                { x: 167.92, y: 105.52 },\n                                { x: 327.76, y: 327.61 }\n                            ],\n                            bbox_confidence: 0.9352,\n                            is_deepfake: 0.9982\n                        }],\n                        status: \"SUCCESS\"\n                    }]\n                }\n            } as DeepFakeContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_DEEP_FAKE\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_DEEP_FAKE action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as DeepFakeContent;\n\n            if (!content.text) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"text content is required\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_DEEP_FAKE\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_DEEPFAKE action\");\n\n        try {\n            const messageContent = message.content as DeepFakeContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {}),\n                attachments: message.content?.attachments\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasMediaFile: !!messageContent?.mediaFile,\n                hasAttachments: !!message.content?.attachments?.length,\n                textContent: messageContent?.text,\n                mediaFile: messageContent?.mediaFile,\n                contentType: typeof messageContent?.text,\n                attachmentCount: message.content?.attachments?.length || 0,\n                firstAttachmentUrl: message.content?.attachments?.[0]?.url,\n                firstAttachmentType: message.content?.attachments?.[0]?.contentType\n            });\n\n            const config = await validateNvidiaNimConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\n                env: config.NVIDIA_NIM_ENV\n            });\n\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\n            console.log(\"Debug - Network config:\", {\n                hasBaseUrl: !!networkConfig?.baseUrl,\n                baseUrl: networkConfig?.baseUrl\n            });\n\n            // Parse the prompt using our helper\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                hasMediaFile: !!messageContent.mediaFile,\n                mediaFile: messageContent.mediaFile,\n                promptLength: messageContent.text?.length,\n                attachments: message.content?.attachments\n            });\n\n            const parsedPrompt = await parseDeepFakePrompt(\n                messageContent.text,\n                message.content?.attachments,\n                config.NVIDIA_NIM_API_KEY\n            );\n            console.log(\"Debug - Parsed content:\", {\n                hasMediaFile: !!parsedPrompt.mediaFile,\n                mediaPath: parsedPrompt.mediaFile,\n                mediaLength: parsedPrompt.mediaFile?.length,\n                isBase64: parsedPrompt.isBase64\n            });\n\n            let imageB64: string;\n            let fileData: Buffer;\n            let mediaPath: string = '';\n            let workspaceRoot: string;\n            let deepfakeDir: string;\n\n            if (parsedPrompt.isBase64) {\n                // Image is already in base64 format from chat\n                console.log(\"Debug - Using base64 image from chat\");\n                imageB64 = parsedPrompt.mediaFile.split('base64,')[1]; // Remove the data:image/jpeg;base64, prefix\n                fileData = Buffer.from(imageB64, 'base64');\n\n                // Set up paths for potential temp file storage\n                workspaceRoot = process.cwd().replace('/agent', '');\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n                    workspaceRoot = path.dirname(workspaceRoot);\n                }\n                deepfakeDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake');\n\n                // Create temp file for base64 image\n                const tempDir = path.join(deepfakeDir, 'temp');\n                if (!fs.existsSync(tempDir)) {\n                    fs.mkdirSync(tempDir, { recursive: true });\n                }\n                mediaPath = path.join(tempDir, `temp_${Date.now()}.jpg`);\n                fs.writeFileSync(mediaPath, fileData);\n            } else {\n                // Image is a file path\n                // Find the workspace root by looking for packages directory\n                // workspaceRoot = process.cwd();\n                workspaceRoot = process.cwd().replace('/agent', '');\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n                    workspaceRoot = path.dirname(workspaceRoot);\n                }\n\n                console.log(\"Debug - Workspace detection:\", {\n                    workspaceRoot,\n                    hasPackagesDir: fs.existsSync(path.join(workspaceRoot, 'packages'))\n                });\n\n                deepfakeDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake');\n                mediaPath = path.join(deepfakeDir, parsedPrompt.mediaFile);\n                const absolutePath = path.resolve(mediaPath);\n\n                console.log(\"Debug - File paths:\", {\n                    workspaceRoot,\n                    deepfakeDir,\n                    mediaPath,\n                    absolutePath,\n                    cwd: process.cwd(),\n                    exists: fs.existsSync(mediaPath),\n                    dirExists: fs.existsSync(deepfakeDir)\n                });\n\n                // Ensure deepfake directory exists\n                if (!fs.existsSync(deepfakeDir)) {\n                    console.log(\"Debug - Creating deepfake directory\");\n                    fs.mkdirSync(deepfakeDir, { recursive: true });\n                }\n\n                // Test file access\n                try {\n                    await fs.promises.access(mediaPath, fs.constants.R_OK);\n                    console.log(\"Debug - File is readable at path:\", mediaPath);\n\n                    const stats = await fs.promises.stat(mediaPath);\n                    console.log(\"Debug - File stats:\", {\n                        size: stats.size,\n                        isFile: stats.isFile(),\n                        permissions: stats.mode\n                    });\n                } catch (error) {\n                    console.error(\"Debug - File access error:\", {\n                        error: error instanceof Error ? error.message : String(error),\n                        path: mediaPath\n                    });\n                }\n\n                // Ensure the file exists\n                if (!fs.existsSync(mediaPath)) {\n                    console.error(`Media file not found: ${mediaPath}`);\n                    // Try listing directory contents\n                    try {\n                        const dirContents = await fs.promises.readdir(path.dirname(mediaPath));\n                        console.log(\"Debug - Directory contents:\", {\n                            path: path.dirname(mediaPath),\n                            files: dirContents\n                        });\n                    } catch (dirError) {\n                        console.error(\"Debug - Failed to read directory:\", dirError);\n                    }\n                    throw new NimError(\n                        NimErrorCode.FILE_NOT_FOUND,\n                        `Media file not found: ${mediaPath}`,\n                        ErrorSeverity.HIGH\n                    );\n                }\n\n                // Read the file\n                console.log(\"Debug - Reading file from path\");\n                fileData = fs.readFileSync(mediaPath);\n                imageB64 = fileData.toString('base64');\n            }\n\n            // ------------------------------------------------------------------------------------------------\n            // Core DeepFake detection logic\n            // ------------------------------------------------------------------------------------------------\n            logGranular(\"Making request to NVIDIA NIM API\", {\n                model: \"hive/deepfake-image-detection\",\n                hasMediaFile: true,\n                imageSize: fileData.length,\n                isBase64Image: parsedPrompt.isBase64\n            });\n\n            try {\n                let payload;\n                let headers: ApiHeaders = {\n                    \"Authorization\": `Bearer ${config.NVIDIA_NIM_API_KEY}`,\n                    \"Accept\": \"application/json\"\n                };\n\n                // Handle large files through asset upload\n                if (imageB64.length < 180000) {\n                    payload = {\n                        input: [`data:image/jpeg;base64,${imageB64}`]\n                    };\n                    headers[\"Content-Type\"] = \"application/json\";\n                } else {\n                    // For base64 images from chat, we need to save them first\n                    let tempPath: string | null = null;\n                    let uploadPath = mediaPath;\n                    //let uploadPath = path.join(workspaceRoot, mediaPath);\n\n                    if (parsedPrompt.isBase64) {\n                        const tempDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake', 'temp');\n                        if (!fs.existsSync(tempDir)) {\n                            fs.mkdirSync(tempDir, { recursive: true });\n                        }\n                        tempPath = path.join(tempDir, `temp_${Date.now()}_large.jpg`);\n                        fs.writeFileSync(tempPath, fileData);\n                        uploadPath = tempPath;\n                    }\n\n                    // Upload the file and get the asset ID\n                    const assetManager = new AssetManager(config.NVIDIA_NIM_API_KEY);\n                    const uploadedAsset = await assetManager.uploadAsset(uploadPath);\n\n                    // Clean up temp file if we created one\n                    if (tempPath && fs.existsSync(tempPath)) {\n                        fs.unlinkSync(tempPath);\n                    }\n\n                    payload = {\n                        input: [`data:image/jpeg;asset_id,${uploadedAsset.assetId}`]\n                    };\n                    headers[\"Content-Type\"] = \"application/json\";\n                    headers[\"NVCF-INPUT-ASSET-REFERENCES\"] = uploadedAsset.assetId;\n                }\n\n                // Make the API request\n                const apiUrl = 'https://ai.api.nvidia.com/v1/cv/hive/deepfake-image-detection';\n                console.log(\"Debug - Making API request:\", {\n                    url: apiUrl,\n                    payloadSize: JSON.stringify(payload).length,\n                    hasAuth: !!headers.Authorization\n                });\n\n                const { data: response } = await axios.post(\n                    apiUrl,\n                    payload,\n                    {\n                        headers,\n                        maxBodyLength: Infinity,\n                        maxContentLength: Infinity\n                    }\n                );\n\n                console.log(\"Debug - API Response received:\", {\n                    status: 'success',\n                    dataLength: JSON.stringify(response).length\n                });\n\n                const deepfakeResponse = response as DeepFakeResponse;\n\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\n                    response: deepfakeResponse\n                });\n\n                // Process the analysis results\n                const analysis: DeepFakeAnalysis = deepfakeResponse.data[0];\n\n                logGranular(\"Processing analysis results\", {\n                    analysis\n                });\n\n                // Save the processed image if available\n                let processedImagePath = '';\n                if (analysis.image) {\n                    const filename = `df_analysis_${Date.now()}.jpg`;\n                    processedImagePath = path.join(deepfakeDir, filename);\n\n                    // Ensure deepfake directory exists\n                    if (!fs.existsSync(path.dirname(processedImagePath))) {\n                        fs.mkdirSync(path.dirname(processedImagePath), { recursive: true });\n                    }\n\n                    // Convert base64 to image and save\n                    const imageBuffer = Buffer.from(analysis.image.split(',')[1], 'base64');\n                    fs.writeFileSync(processedImagePath, imageBuffer);\n\n                    logGranular(\"Saved processed image\", {\n                        path: processedImagePath\n                    });\n                }\n\n                const faceCount = analysis.bounding_boxes.length;\n                const faceDescriptions = analysis.bounding_boxes.map((box, idx) =>\n                    `Face #${idx + 1}: ${(box.is_deepfake * 100).toFixed(2)}% likely to be a deepfake`\n                );\n\n                const analysisText = `DeepFake Analysis: Image contains ${faceCount} face(s). ${faceDescriptions.join(\". \")}${\n                    processedImagePath ? `\\n\\nProcessed image saved to: ${processedImagePath}` : ''\n                }`;\n\n                const processedData = {\n                    response: \"Analyzed image for potential manipulation\",\n                    analysis: [analysis],\n                    processedImage: processedImagePath || null\n                };\n\n                if (callback) {\n                    callback({\n                        text: analysisText,\n                        success: true,\n                        mediaPath,\n                        data: processedData\n                    } as DeepFakeContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error analyzing image: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        mediaPath: parsedPrompt.mediaFile,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as DeepFakeContent);\n                }\n                throw new NimError(\n                    NimErrorCode.API_ERROR,\n                    \"Failed to get response from NVIDIA NIM\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to execute GET_DEEP_FAKE action\", { error });\n            throw new NimError(\n                NimErrorCode.NETWORK_ERROR,\n                \"Failed to execute GET_DEEP_FAKE action\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getDeepFakeAction;\n\n","import { Media } from \"@elizaos/core\";\nimport { AssetManager } from \"./assetManager.js\";\nimport path from 'path';\n\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\n\ninterface ParsedAIImagePrompt {\n    mediaFile: string;\n    isBase64: boolean;\n}\n\n/**\n * Parses a prompt string to extract the media file for AI image analysis\n * Format expected either:\n * [IMAGE]\n * path/to/image/file\n * [/IMAGE]\n *\n * or\n *\n * [IMAGE]\n * data:image/jpeg;base64,...\n * [/IMAGE]\n *\n * or directly from message attachments\n */\nexport async function parseAIImagePrompt(text: string, attachments?: Media[], apiKey?: string): Promise<ParsedAIImagePrompt> {\n    try {\n        // First check for attachments\n        if (attachments && attachments.length > 0) {\n            const imageAttachment = attachments[0];\n            if (!imageAttachment.url) {\n                throw new Error(\"Invalid media attachment: no URL found\");\n            }\n\n            // Handle the uploaded file\n            if (apiKey) {\n                const assetManager = new AssetManager(apiKey);\n                const aiImageDir = path.join('packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage');\n                const newPath = await assetManager.handleChatUpload(imageAttachment.url, aiImageDir);\n\n                return {\n                    mediaFile: path.basename(newPath),\n                    isBase64: false\n                };\n            }\n\n            return {\n                mediaFile: imageAttachment.url,\n                isBase64: imageAttachment.url.startsWith('data:image')\n            };\n        }\n\n        // If no attachments, try to parse from text\n        const mediaMatch = text.match(/\\[IMAGE\\]([\\s\\S]*?)\\[\\/IMAGE\\]/);\n\n        if (!mediaMatch) {\n            throw new Error(\"Image file path or data is required\");\n        }\n\n        const mediaContent = mediaMatch[1].trim();\n        const isBase64 = mediaContent.startsWith('data:image');\n\n        return {\n            mediaFile: mediaContent,\n            isBase64\n        };\n    } catch (error) {\n        if (error instanceof NimError) {\n            throw error;\n        }\n        throw new NimError(\n            NimErrorCode.PARSE_ERROR,\n            \"Failed to parse AI image prompt\",\n            ErrorSeverity.HIGH,\n            { originalError: error }\n        );\n    }\n}\n\n/**\n * Creates a formatted AI image analysis prompt string\n */\nexport function createAIImagePrompt(mediaFile: string): string {\n    return `[IMAGE]\n${mediaFile}\n[/IMAGE]`;\n}","import { Action, elizaLogger } from \"@elizaos/core\";\nimport { IAgentRuntime, Memory, State, HandlerCallback, ActionExample, Media } from \"@elizaos/core\";\nimport axios from 'axios';\nimport fs from 'fs';\nimport { validateNvidiaNimConfig, getNetworkConfig, getConfig } from \"../environment.js\";\nimport { parseAIImagePrompt } from \"../utils/aiImagePromptParser.js\";\nimport { AIImageContent, AIImageResponse, AIImageAnalysis } from \"../types/aiImage.js\";\nimport { AssetManager } from \"../utils/assetManager.js\";\nimport { NimError, NimErrorCode, ErrorSeverity } from \"../errors/nimErrors.js\";\nimport path from 'path';\n\n// Get configuration for granular logging\nconst config = getConfig();\nconst GRANULAR_LOG = config.NVIDIA_GRANULAR_LOG;\n\n// Enhanced logging helper\nconst logGranular = (message: string, data?: unknown) => {\n    if (GRANULAR_LOG) {\n        elizaLogger.info(`[AIImageDetection] ${message}`, data);\n        console.log(`[AIImageDetection] ${message}`, data ? JSON.stringify(data, null, 2) : '');\n    }\n};\n\ninterface ApiHeaders {\n    Authorization: string;\n    Accept: string;\n    'Content-Type'?: string;\n    'NVCF-INPUT-ASSET-REFERENCES'?: string;\n    [key: string]: string | undefined;\n}\n\nexport const getAIImageAction: Action = {\n    name: \"GET_AI_IMAGE\",\n    similes: [\"CHECK_AI_IMAGE\", \"ANALYZE_AI_IMAGE\", \"AI_IMAGE_CONTROL\"],\n    description: \"Use NVIDIA AI Image detection model to analyze if images were generated by AI\",\n    examples: [[\n        {\n            user: \"user\",\n            content: {\n                text: \"Check if this image is AI generated [IMAGE]\\ntest_ai.jpg\\n[/IMAGE]  \",\n                mediaPath: \"test_ai.jpg\"\n            } as AIImageContent\n        } as ActionExample,\n        {\n            user: \"assistant\",\n            content: {\n                text: \"AI Image Analysis: Image is 99.94% likely to be AI-generated. Most likely source: Stable Diffusion XL (88.75% confidence).\",\n                success: true,\n                data: {\n                    response: \"Detected AI-generated image\",\n                    analysis: [{\n                        index: 0,\n                        is_ai_generated: 0.9994,\n                        possible_sources: {\n                            stablediffusionxl: 0.8875,\n                            midjourney: 0.0136,\n                            dalle: 0.0518,\n                        },\n                        status: \"SUCCESS\"\n                    }]\n                }\n            } as AIImageContent\n        } as ActionExample\n    ]],\n\n    validate: async (_runtime: IAgentRuntime, message: Memory): Promise<boolean> => {\n        if (message.content?.type !== \"GET_AI_IMAGE\") {\n            return true;\n        }\n\n        logGranular(\"Validating GET_AI_IMAGE action\", {\n            content: message.content\n        });\n\n        try {\n            const content = message.content as AIImageContent;\n\n            if (!content.text) {\n                throw new NimError(\n                    NimErrorCode.VALIDATION_FAILED,\n                    \"text content is required\",\n                    ErrorSeverity.HIGH\n                );\n            }\n\n            return true;\n        } catch (error) {\n            logGranular(\"Validation failed\", { error });\n            elizaLogger.error(\"Validation failed for GET_AI_IMAGE\", {\n                error: error instanceof Error ? error.message : String(error)\n            });\n            return false;\n        }\n    },\n\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        _state?: State,\n        _options: { [key: string]: unknown } = {},\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        logGranular(\"Executing GET_AI_IMAGE action\");\n\n        try {\n            const messageContent = message.content as AIImageContent;\n            console.log(\"Debug - Full message content:\", {\n                fullContent: message.content,\n                rawText: messageContent?.text,\n                type: message.content?.type,\n                allKeys: Object.keys(message.content || {}),\n                attachments: message.content?.attachments\n            });\n\n            console.log(\"Debug - Message content details:\", {\n                hasText: !!messageContent?.text,\n                hasMediaFile: !!messageContent?.mediaFile,\n                hasAttachments: !!message.content?.attachments?.length,\n                textContent: messageContent?.text,\n                mediaFile: messageContent?.mediaFile,\n                contentType: typeof messageContent?.text,\n                attachmentCount: message.content?.attachments?.length || 0,\n                firstAttachmentUrl: message.content?.attachments?.[0]?.url,\n                firstAttachmentType: message.content?.attachments?.[0]?.contentType\n            });\n\n            const config = await validateNvidiaNimConfig(runtime);\n            console.log(\"Debug - Config validated:\", {\n                hasApiKey: !!config.NVIDIA_NIM_API_KEY,\n                env: config.NVIDIA_NIM_ENV\n            });\n\n            const networkConfig = getNetworkConfig(config.NVIDIA_NIM_ENV);\n            console.log(\"Debug - Network config:\", {\n                hasBaseUrl: !!networkConfig?.baseUrl,\n                baseUrl: networkConfig?.baseUrl\n            });\n\n            // Parse the prompt using our helper\n            console.log(\"Debug - Raw prompt:\", {\n                text: messageContent.text,\n                hasMediaFile: !!messageContent.mediaFile,\n                mediaFile: messageContent.mediaFile,\n                promptLength: messageContent.text?.length,\n                attachments: message.content?.attachments\n            });\n\n            const parsedPrompt = await parseAIImagePrompt(\n                messageContent.text,\n                message.content?.attachments,\n                config.NVIDIA_NIM_API_KEY\n            );\n            console.log(\"Debug - Parsed content:\", {\n                hasMediaFile: !!parsedPrompt.mediaFile,\n                mediaPath: parsedPrompt.mediaFile,\n                mediaLength: parsedPrompt.mediaFile?.length,\n                isBase64: parsedPrompt.isBase64\n            });\n\n            let imageB64: string;\n            let fileData: Buffer;\n            let mediaPath: string = '';\n            let workspaceRoot: string;\n            let aiImageDir: string;\n\n            if (parsedPrompt.isBase64) {\n                // Image is already in base64 format from chat\n                console.log(\"Debug - Using base64 image from chat\");\n                imageB64 = parsedPrompt.mediaFile.split('base64,')[1]; // Remove the data:image/jpeg;base64, prefix\n                fileData = Buffer.from(imageB64, 'base64');\n\n                // Set up paths for potential temp file storage\n                workspaceRoot = process.cwd().replace('/agent', '');\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n                    workspaceRoot = path.dirname(workspaceRoot);\n                }\n                aiImageDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage');\n\n                // Create temp file for base64 image\n                const tempDir = path.join(aiImageDir, 'temp');\n                if (!fs.existsSync(tempDir)) {\n                    fs.mkdirSync(tempDir, { recursive: true });\n                }\n                mediaPath = path.join(tempDir, `temp_${Date.now()}.jpg`);\n                fs.writeFileSync(mediaPath, fileData);\n            } else {\n                // Image is a file path\n                // Find the workspace root by looking for packages directory\n                // workspaceRoot = process.cwd();\n                workspaceRoot = process.cwd().replace('/agent', '');\n                while (!fs.existsSync(path.join(workspaceRoot, 'packages')) && workspaceRoot !== path.parse(workspaceRoot).root) {\n                    workspaceRoot = path.dirname(workspaceRoot);\n                }\n\n                console.log(\"Debug - Workspace detection:\", {\n                    workspaceRoot,\n                    hasPackagesDir: fs.existsSync(path.join(workspaceRoot, 'packages'))\n                });\n\n                aiImageDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage');\n                mediaPath = path.join(aiImageDir, parsedPrompt.mediaFile);\n                const absolutePath = path.resolve(mediaPath);\n\n                console.log(\"Debug - File paths:\", {\n                    workspaceRoot,\n                    aiImageDir,\n                    mediaPath,\n                    absolutePath,\n                    cwd: process.cwd(),\n                    exists: fs.existsSync(mediaPath),\n                    dirExists: fs.existsSync(aiImageDir)\n                });\n\n                // Ensure aiimage directory exists\n                if (!fs.existsSync(aiImageDir)) {\n                    console.log(\"Debug - Creating aiimage directory\");\n                    fs.mkdirSync(aiImageDir, { recursive: true });\n                }\n\n                // Test file access\n                try {\n                    await fs.promises.access(mediaPath, fs.constants.R_OK);\n                    console.log(\"Debug - File is readable at path:\", mediaPath);\n\n                    const stats = await fs.promises.stat(mediaPath);\n                    console.log(\"Debug - File stats:\", {\n                        size: stats.size,\n                        isFile: stats.isFile(),\n                        permissions: stats.mode\n                    });\n                } catch (error) {\n                    console.error(\"Debug - File access error:\", {\n                        error: error instanceof Error ? error.message : String(error),\n                        path: mediaPath\n                    });\n                }\n\n                // Ensure the file exists\n                if (!fs.existsSync(mediaPath)) {\n                    console.error(`Media file not found: ${mediaPath}`);\n                    // Try listing directory contents\n                    try {\n                        const dirContents = await fs.promises.readdir(path.dirname(mediaPath));\n                        console.log(\"Debug - Directory contents:\", {\n                            path: path.dirname(mediaPath),\n                            files: dirContents\n                        });\n                    } catch (dirError) {\n                        console.error(\"Debug - Failed to read directory:\", dirError);\n                    }\n                    throw new NimError(\n                        NimErrorCode.FILE_NOT_FOUND,\n                        `Media file not found: ${mediaPath}`,\n                        ErrorSeverity.HIGH\n                    );\n                }\n\n                // Read the file\n                console.log(\"Debug - Reading file from path\");\n                fileData = fs.readFileSync(mediaPath);\n                imageB64 = fileData.toString('base64');\n            }\n\n            // ------------------------------------------------------------------------------------------------\n            // Core AI Image detection logic\n            // ------------------------------------------------------------------------------------------------\n            logGranular(\"Making request to NVIDIA NIM API\", {\n                model: \"hive/ai-generated-image-detection\",\n                hasMediaFile: true,\n                imageSize: fileData.length,\n                isBase64Image: parsedPrompt.isBase64\n            });\n\n            try {\n                let payload;\n                let headers: ApiHeaders = {\n                    \"Authorization\": `Bearer ${config.NVIDIA_NIM_API_KEY}`,\n                    \"Accept\": \"application/json\"\n                };\n\n                // Handle large files through asset upload\n                if (imageB64.length < 180000) {\n                    payload = {\n                        input: [`data:image/jpeg;base64,${imageB64}`]\n                    };\n                    headers[\"Content-Type\"] = \"application/json\";\n                } else {\n                    // For base64 images from chat, we need to save them first\n                    let tempPath: string | null = null;\n                    let uploadPath = mediaPath;\n                    //let uploadPath = path.join(workspaceRoot, mediaPath);\n\n                    if (parsedPrompt.isBase64) {\n                        const tempDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'aiimage', 'temp');\n                        //const tempDir = path.join(workspaceRoot, 'packages', 'plugin-nvidia-nim', 'src', 'assets', 'deepfake', 'temp');\n                        if (!fs.existsSync(tempDir)) {\n                            fs.mkdirSync(tempDir, { recursive: true });\n                        }\n                        tempPath = path.join(tempDir, `temp_${Date.now()}_large.jpg`);\n                        fs.writeFileSync(tempPath, fileData);\n                        uploadPath = tempPath;\n                    }\n\n                    // Upload the file and get the asset ID\n                    const assetManager = new AssetManager(config.NVIDIA_NIM_API_KEY);\n                    const uploadedAsset = await assetManager.uploadAsset(uploadPath);\n\n                    // Clean up temp file if we created one\n                    if (tempPath && fs.existsSync(tempPath)) {\n                        fs.unlinkSync(tempPath);\n                    }\n\n                    payload = {\n                        input: [`data:image/jpeg;asset_id,${uploadedAsset.assetId}`]\n                    };\n                    headers[\"Content-Type\"] = \"application/json\";\n                    headers[\"NVCF-INPUT-ASSET-REFERENCES\"] = uploadedAsset.assetId;\n                }\n\n                // Make the API request\n                const apiUrl = 'https://ai.api.nvidia.com/v1/cv/hive/ai-generated-image-detection';\n                console.log(\"Debug - Making API request:\", {\n                    url: apiUrl,\n                    payloadSize: JSON.stringify(payload).length,\n                    hasAuth: !!headers.Authorization\n                });\n\n                const { data: response } = await axios.post(\n                    apiUrl,\n                    payload,\n                    {\n                        headers,\n                        maxBodyLength: Infinity,\n                        maxContentLength: Infinity\n                    }\n                );\n\n                console.log(\"Debug - API Response received:\", {\n                    status: 'success',\n                    dataLength: JSON.stringify(response).length\n                });\n\n                const aiImageResponse = response as AIImageResponse;\n\n                logGranular(\"Successfully received response from NVIDIA NIM\", {\n                    response: aiImageResponse\n                });\n\n                // Process the analysis results\n                const analysis: AIImageAnalysis = aiImageResponse.data[0];\n\n                logGranular(\"Processing analysis results\", {\n                    analysis\n                });\n\n                const aiProbability = (analysis.is_ai_generated * 100).toFixed(2);\n\n                // Find the most likely source\n                const sources = Object.entries(analysis.possible_sources);\n                const topSource = sources.reduce((prev, curr) =>\n                    curr[1] > prev[1] ? curr : prev\n                );\n                const sourceConfidence = (topSource[1] * 100).toFixed(2);\n\n                const analysisText = `AI Image Analysis: Image is ${aiProbability}% likely to be AI-generated. ${\n                    topSource[0] !== 'none'\n                        ? `Most likely source: ${topSource[0]} (${sourceConfidence}% confidence).`\n                        : 'No specific AI source identified.'\n                }`;\n\n                const processedData = {\n                    response: \"Analyzed image for AI generation\",\n                    analysis: [analysis]\n                };\n\n                if (callback) {\n                    callback({\n                        text: analysisText,\n                        success: true,\n                        mediaPath,\n                        data: processedData\n                    } as AIImageContent);\n                }\n\n                return true;\n            } catch (error) {\n                logGranular(\"Failed to get response from NVIDIA NIM\", { error });\n                if (callback) {\n                    callback({\n                        text: `Error analyzing image: ${error instanceof Error ? error.message : String(error)}`,\n                        success: false,\n                        mediaPath: mediaPath,\n                        data: {\n                            error: error instanceof Error ? error.message : String(error)\n                        }\n                    } as AIImageContent);\n                }\n                throw new NimError(\n                    NimErrorCode.API_ERROR,\n                    \"Failed to get response from NVIDIA NIM\",\n                    ErrorSeverity.HIGH,\n                    { originalError: error }\n                );\n            }\n        } catch (error) {\n            logGranular(\"Failed to execute GET_AI_IMAGE action\", { error });\n            throw new NimError(\n                NimErrorCode.NETWORK_ERROR,\n                \"Failed to execute GET_AI_IMAGE action\",\n                ErrorSeverity.HIGH,\n                { originalError: error }\n            );\n        }\n    }\n};\n\nexport default getAIImageAction;\n\n","import { Plugin } from \"@elizaos/core\";\nimport chalk from 'chalk';\nimport Table from 'cli-table3';\nimport ora from 'ora';\nimport { getConfig } from \"./environment\";\nimport getTopicAction from \"./actions/actionGetTopic\";\nimport getSafetyAction from \"./actions/actionGetSafety\";\nimport getJailBreakAction from \"./actions/actionGetJailBreak\";\nimport getCosmosDescriptionAction from \"./actions/actionGetCosmos\";\nimport getDeepFakeAction from \"./actions/actionGetDeepFake\";\nimport getAIImageAction from \"./actions/actionGetAIImage\";\n\n// Start the loader\nconst spinner = ora({\n  text: chalk.cyan('Initializing NVIDIA NIM Plugin...'),\n  spinner: 'dots12',\n  color: 'cyan'\n}).start();\n\nconst actions = [\n  getTopicAction,\n  getSafetyAction,\n  getJailBreakAction,\n  getCosmosDescriptionAction,\n  getDeepFakeAction,\n  getAIImageAction\n];\n\n// Get NVIDIA_NIM_SPASH from config\nconst NVIDIA_NIM_SPASH = getConfig().NVIDIA_NIM_SPASH;\n\n// Only show splash screen if NVIDIA_NIM_SPASH is true\nif (NVIDIA_NIM_SPASH) {\n  // Initial banner with chalk styling\n  console.log('\\n' + chalk.cyan('┌────────────────────────────────────────┐'));\n  console.log(chalk.cyan('│') + chalk.yellow.bold('          NVIDIA NIM PLUGIN             ') + chalk.cyan(' │'));\n  console.log(chalk.cyan('├────────────────────────────────────────┤'));\n  console.log(chalk.cyan('│') + chalk.white('  Initializing NVIDIA NIM Services...    ') + chalk.cyan('│'));\n  console.log(chalk.cyan('│') + chalk.white('  Version: 1.0.0                        ') + chalk.cyan('│'));\n  console.log(chalk.cyan('└────────────────────────────────────────┘'));\n\n  // Stop the loader\n  spinner.succeed(chalk.green('NVIDIA NIM Plugin initialized successfully!'));\n\n  // Create a beautiful table for actions\n  const actionTable = new Table({\n    head: [\n      chalk.cyan('Action'),\n      chalk.cyan('H'),\n      chalk.cyan('V'),\n      chalk.cyan('E'),\n      chalk.cyan('Similes')\n    ],\n    style: {\n      head: [],\n      border: ['cyan']\n    }\n  });\n\n  // Format and add action information\n  actions.forEach(action => {\n    actionTable.push([\n      chalk.white(action.name),\n      typeof action.handler === 'function' ? chalk.green('✓') : chalk.red('✗'),\n      typeof action.validate === 'function' ? chalk.green('✓') : chalk.red('✗'),\n      action.examples?.length > 0 ? chalk.green('✓') : chalk.red('✗'),\n      chalk.gray(action.similes?.join(', ') || 'none')\n    ]);\n  });\n\n  // Display the action table\n  console.log('\\n' + actionTable.toString());\n\n  // Plugin status with a nice table\n  const statusTable = new Table({\n    style: {\n      border: ['cyan']\n    }\n  });\n\n  statusTable.push(\n    [chalk.cyan('Plugin Status')],\n    [chalk.white('Name    : ') + chalk.yellow('nvidia-nim')],\n    [chalk.white('Actions : ') + chalk.green(actions.length.toString())],\n    [chalk.white('Status  : ') + chalk.green('Loaded & Ready')]\n  );\n\n  console.log('\\n' + statusTable.toString() + '\\n');\n} else {\n  // Stop the loader silently if splash is disabled\n  spinner.stop();\n}\n\nconst nvidiaNimPlugin: Plugin = {\n  name: \"nvidia-nim\",\n  description: \"NVIDIA NIM Plugin for AI Foundation Models integration\",\n  actions: actions,\n  evaluators: []\n};\n\n// Export for both CommonJS and ESM\nexport { nvidiaNimPlugin };\nexport default nvidiaNimPlugin;\n"]}