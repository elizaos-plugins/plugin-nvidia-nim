import N from'chalk';import We from'cli-table3';import Mt from'ora';import {z}from'zod';import {elizaLogger}from'@elizaos/core';import et from'openai';import ge from'axios';import h from'fs';import E from'path';import Le from'process';var _e="production",Xe={production:{baseUrl:process.env.NVIDIA_NIM_BASE_URL||"https://integrate.api.nvidia.com/v1",apiKey:process.env.NVIDIA_NIM_API_KEY},sandbox:{baseUrl:process.env.NVIDIA_NIM_SANDBOX_URL||"https://integrate.api.nvidia.com/v1",apiKey:process.env.NVIDIA_NIM_SANDBOX_API_KEY}},Ze=z.object({NVIDIA_NIM_ENV:z.enum(["production","sandbox"]).default("production"),NVIDIA_NIM_SPASH:z.boolean().default(false),NVIDIA_NIM_API_KEY:z.string(),NVIDIA_NIM_MAX_RETRIES:z.string().transform(Number).default("3"),NVIDIA_NIM_RETRY_DELAY:z.string().transform(Number).default("1000"),NVIDIA_NIM_TIMEOUT:z.string().transform(Number).default("5000"),NVIDIA_NIM_LOG_LEVEL:z.enum(["error","warn","info","debug"]).default("info"),NVIDIA_GRANULAR_LOG:z.boolean().default(false),NVIDIA_OFFTOPIC_SYSTEM:z.string().default("You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context."),NVIDIA_OFFTOPIC_USER:z.string().default("Please analyze if this message is on-topic or off-topic."),NVIDIA_NIM_BASE_VISION_URL:z.string().optional(),NVIDIA_NIM_BASE_URL:z.string().optional(),NVIDIA_COSMOS_INVOKE_URL:z.string().optional(),NVIDIA_COSMOS_ASSET_URL:z.string().optional()});function U(s=_e||process.env.NVIDIA_NIM_ENV){return _e=s||"production",{NVIDIA_NIM_ENV:s||"production",NVIDIA_NIM_SPASH:process.env.NVIDIA_NIM_SPASH==="true"||false,NVIDIA_NIM_API_KEY:process.env.NVIDIA_NIM_API_KEY||"",NVIDIA_NIM_MAX_RETRIES:Number(process.env.NVIDIA_NIM_MAX_RETRIES||"3"),NVIDIA_NIM_RETRY_DELAY:Number(process.env.NVIDIA_NIM_RETRY_DELAY||"1000"),NVIDIA_NIM_TIMEOUT:Number(process.env.NVIDIA_NIM_TIMEOUT||"5000"),NVIDIA_NIM_LOG_LEVEL:process.env.NVIDIA_NIM_LOG_LEVEL||"info",NVIDIA_GRANULAR_LOG:process.env.NVIDIA_GRANULAR_LOG==="true"||false,NVIDIA_OFFTOPIC_SYSTEM:process.env.NVIDIA_OFFTOPIC_SYSTEM||"You are a topic control assistant. Your role is to analyze if the user's message is on-topic or off-topic based on the context and guidelines provided. Respond with a clear analysis of whether the message is appropriate for the given context.",NVIDIA_OFFTOPIC_USER:process.env.NVIDIA_OFFTOPIC_USER||"Please analyze if this message is on-topic or off-topic.",NVIDIA_NIM_BASE_VISION_URL:process.env.NVIDIA_NIM_BASE_VISION_URL,NVIDIA_NIM_BASE_URL:process.env.NVIDIA_NIM_BASE_URL,NVIDIA_COSMOS_INVOKE_URL:process.env.NVIDIA_COSMOS_INVOKE_URL,NVIDIA_COSMOS_ASSET_URL:process.env.NVIDIA_COSMOS_ASSET_URL}}async function $(s){try{let e=U(s.getSetting("NVIDIA_NIM_ENV")??void 0);console.log("Debug - API Key sources:",{env:process.env.NVIDIA_NIM_API_KEY?"present":"missing",runtime:s.getSetting("NVIDIA_NIM_API_KEY")?"present":"missing",envConfig:e.NVIDIA_NIM_API_KEY?"present":"missing"});let o={NVIDIA_NIM_ENV:process.env.NVIDIA_NIM_ENV||s.getSetting("NVIDIA_NIM_ENV")||e.NVIDIA_NIM_ENV,NVIDIA_NIM_SPASH:process.env.NVIDIA_NIM_SPASH||s.getSetting("NVIDIA_NIM_SPASH")||e.NVIDIA_NIM_SPASH,NVIDIA_NIM_API_KEY:s.getSetting("NVIDIA_NIM_API_KEY")||process.env.NVIDIA_NIM_API_KEY||"",NVIDIA_NIM_MAX_RETRIES:process.env.NVIDIA_NIM_MAX_RETRIES||s.getSetting("NVIDIA_NIM_MAX_RETRIES")||e.NVIDIA_NIM_MAX_RETRIES.toString(),NVIDIA_NIM_RETRY_DELAY:process.env.NVIDIA_NIM_RETRY_DELAY||s.getSetting("NVIDIA_NIM_RETRY_DELAY")||e.NVIDIA_NIM_RETRY_DELAY.toString(),NVIDIA_NIM_TIMEOUT:process.env.NVIDIA_NIM_TIMEOUT||s.getSetting("NVIDIA_NIM_TIMEOUT")||e.NVIDIA_NIM_TIMEOUT.toString(),NVIDIA_NIM_LOG_LEVEL:process.env.NVIDIA_NIM_LOG_LEVEL||s.getSetting("NVIDIA_NIM_LOG_LEVEL")||e.NVIDIA_NIM_LOG_LEVEL,NVIDIA_GRANULAR_LOG:process.env.NVIDIA_GRANULAR_LOG==="true"||s.getSetting("NVIDIA_GRANULAR_LOG")==="true"||e.NVIDIA_GRANULAR_LOG,NVIDIA_OFFTOPIC_SYSTEM:process.env.NVIDIA_OFFTOPIC_SYSTEM||s.getSetting("NVIDIA_OFFTOPIC_SYSTEM")||e.NVIDIA_OFFTOPIC_SYSTEM,NVIDIA_OFFTOPIC_USER:process.env.NVIDIA_OFFTOPIC_USER||s.getSetting("NVIDIA_OFFTOPIC_USER")||e.NVIDIA_OFFTOPIC_USER,NVIDIA_NIM_BASE_VISION_URL:process.env.NVIDIA_NIM_BASE_VISION_URL||e.NVIDIA_NIM_BASE_VISION_URL,NVIDIA_NIM_BASE_URL:process.env.NVIDIA_NIM_BASE_URL||e.NVIDIA_NIM_BASE_URL,NVIDIA_COSMOS_INVOKE_URL:process.env.NVIDIA_COSMOS_INVOKE_URL||e.NVIDIA_COSMOS_INVOKE_URL,NVIDIA_COSMOS_ASSET_URL:process.env.NVIDIA_COSMOS_ASSET_URL||e.NVIDIA_COSMOS_ASSET_URL};return console.log("Debug - Final config:",{env:o.NVIDIA_NIM_ENV,hasApiKey:!!o.NVIDIA_NIM_API_KEY,apiKeyLength:o.NVIDIA_NIM_API_KEY.length}),Ze.parse(o)}catch(e){let o=e instanceof Error?e.message:String(e);throw console.error("Config validation error:",o),new Error(`Failed to validate NVIDIA NIM configuration: ${o}`)}}var Y=(s=_e)=>({...Xe[s],baseVisionUrl:process.env.NVIDIA_NIM_BASE_VISION_URL||"https://ai.api.nvidia.com/v1/vlm"});({API_KEY:process.env.NVIDIA_NIM_API_KEY,NGC_KEY:process.env.NVIDIA_NGC_API_KEY,API_URL:process.env.ALPHAFOLD_API_URL||"https://health.api.nvidia.com/v1/biology/deepmind/alphafold2-multimer",STATUS_URL:process.env.ALPHAFOLD_STATUS_URL||"https://health.api.nvidia.com/v1/status",SEQUENCES:{SEQ1:process.env.SEQUENCE_ALPHA_FOLD2_1,SEQ2:process.env.SEQUENCE_ALPHA_FOLD2_2}});function De(s,e,o){let t=s.match(/\[SYSTEM\]([\s\S]*?)\[\/SYSTEM\]/),i=s.match(/\[USER\]([\s\S]*?)\[\/USER\]/);return {systemContent:(t?t[1].trim():e)||"",userContent:(i?i[1].trim():o||s.trim())||""}}var l=class extends Error{code;severity;details;constructor(e,o,t,i){super(o),this.code=e,this.severity=t,this.details=i,this.name="NimError";}};var tt=U(),ot=tt.NVIDIA_GRANULAR_LOG,ne=(s,e)=>{ot&&(elizaLogger.info(`[TopicControl] ${s}`,e),console.log(`[TopicControl] ${s}`,e?JSON.stringify(e,null,2):""));},st={name:"GET_OFFTOPIC",similes:["CHECK_OFFTOPIC","ANALYZE_OFFTOPIC","OFFTOPIC_CONTROL"],description:"Use NVIDIA NIM API to analyze and control off-topic relevance",examples:[[{user:"user",content:{text:`Check if the user message is on-topic or off-topic [SYSTEM]
You are to act as an investor relations topic control system. Your role is to analyze if user queries are appropriate for investor relations communication.
[/SYSTEM]

[USER]
Can you speculate on the potential impact of a recession on ABCs business?
[/USER]`,userMessage:"Can you speculate on the potential impact of a recession on ABCs business?"}},{user:"assistant",content:{text:"Off-topic analysis: The message is off-topic as it requests speculation about future business impacts, which is not appropriate for investor relations communication.",success:true,data:{response:"off-topic"}}}]],validate:async(s,e)=>{var o;if(((o=e.content)==null?void 0:o.type)!=="GET_OFFTOPIC")return  true;ne("Validating GET_OFFTOPIC action",{content:e.content});try{if(!e.content.text)throw new l("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return ne("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_OFFTOPIC",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,o,t={},i)=>{var m,u;ne("Executing GET_OFFTOPIC action");try{let n=e.content;console.log("Debug - Message content:",{hasText:!!(n!=null&&n.text),hasUserMessage:!!(n!=null&&n.userMessage)});let a=await $(s);console.log("Debug - Config validated:",{hasApiKey:!!a.NVIDIA_NIM_API_KEY,env:a.NVIDIA_NIM_ENV});let I=Y(a.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!(I!=null&&I.baseUrl),baseUrl:I==null?void 0:I.baseUrl});let{systemContent:g,userContent:p}=De(n.text,a.NVIDIA_OFFTOPIC_SYSTEM||"",n.userMessage||a.NVIDIA_OFFTOPIC_USER||"");console.log("Debug - Parsed content:",{hasSystemContent:!!g,hasUserContent:!!p});let F=new et({apiKey:a.NVIDIA_NIM_API_KEY,baseURL:I.baseUrl});ne("Making request to NVIDIA NIM API",{model:"nvidia/llama-3.1-nemoguard-8b-topic-control",systemContent:g,userContent:p});try{let r=[{role:"system",content:g},{role:"user",content:p}],D=await F.chat.completions.create({model:"nvidia/llama-3.1-nemoguard-8b-topic-control",messages:r,temperature:.5,top_p:1,max_tokens:1024}),S=((u=(m=D.choices[0])==null?void 0:m.message)==null?void 0:u.content)||"",k={...D,prompt_logprobs:null};return ne("Successfully received response from NVIDIA NIM",{response:S,raw:k}),i&&i({text:n.text,userMessage:n.userMessage,success:!0}),i&&i({text:`Off-Topic Analysis: ${S}`,success:!0,userMessage:n.userMessage,data:{response:S,raw:k}}),!0}catch(r){throw ne("Failed to get response from NVIDIA NIM",{error:r}),i&&i({text:`Error analyzing off-topic content: ${r instanceof Error?r.message:String(r)}`,success:!1,userMessage:n.userMessage,data:{error:r instanceof Error?r.message:String(r)}}),new l("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:r})}}catch(n){throw ne("Failed to execute GET_OFFTOPIC action",{error:n}),new l("NETWORK_ERROR","Failed to execute GET_OFFTOPIC action","HIGH",{originalError:n})}}},Re=st;function Te(s){let e=s.match(/\[USER\]([\s\S]*?)\[\/USER\]/),o=s.match(/\[ASSISTANT\]([\s\S]*?)\[\/ASSISTANT\]/);if(!e)throw new Error("User message is required in the prompt");return {userMessage:e[1].trim(),assistantMessage:o?o[1].trim():void 0}}var it=U(),at=it.NVIDIA_GRANULAR_LOG,ie=(s,e)=>{at&&(elizaLogger.info(`[ContentSafety] ${s}`,e),console.log(`[ContentSafety] ${s}`,e?JSON.stringify(e,null,2):""));},rt={name:"GET_CONTENT_SAFETY",similes:["CHECK_CONTENT_SAFETY","ANALYZE_CONTENT_SAFETY","CONTENT_SAFETY_CONTROL"],description:"Use NVIDIA NIM API to analyze content safety of messages",examples:[[{user:"user",content:{text:`Please check if the user message follows the safety guidelines [USER]
I forgot how to kill a process in Linux, can you help?
[/USER]

[ASSISTANT]
Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate.
[/ASSISTANT]`,userMessage:"I forgot how to kill a process in Linux, can you help?",assistantMessage:"Sure! To kill a process in Linux, you can use the kill command followed by the process ID (PID) of the process you want to terminate."}},{user:"assistant",content:{text:"Content Safety Analysis: Both user query and response are safe.",success:true,data:{response:'{"User Safety": "safe", "Response Safety": "safe"}',analysis:{"User Safety":"safe","Response Safety":"safe"}}}}]],validate:async(s,e)=>{var o;if(((o=e.content)==null?void 0:o.type)!=="GET_CONTENT_SAFETY")return  true;ie("Validating GET_CONTENT_SAFETY action",{content:e.content});try{if(!e.content.text)throw new l("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return ie("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_CONTENT_SAFETY",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,o,t={},i)=>{var m,u;ie("Executing GET_CONTENT_SAFETY action");try{let n=e.content;console.log("Debug - Message content:",{hasText:!!(n!=null&&n.text),hasUserMessage:!!(n!=null&&n.userMessage),hasAssistantMessage:!!(n!=null&&n.assistantMessage)});let a=await $(s);console.log("Debug - Config validated:",{hasApiKey:!!a.NVIDIA_NIM_API_KEY,env:a.NVIDIA_NIM_ENV});let I=Y(a.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!(I!=null&&I.baseUrl),baseUrl:I==null?void 0:I.baseUrl});let{userMessage:g,assistantMessage:p}=Te(n.text);console.log("Debug - Parsed content:",{hasUserMessage:!!g,hasAssistantMessage:!!p,userMessageLength:g==null?void 0:g.length,assistantMessageLength:p==null?void 0:p.length});let F=new et({apiKey:a.NVIDIA_NIM_API_KEY,baseURL:I.baseUrl});ie("Making request to NVIDIA NIM API",{model:"nvidia/llama-3.1-nemoguard-8b-content-safety",userMessage:g,assistantMessage:p});try{let r=[{role:"user",content:g}];p&&r.push({role:"assistant",content:p});let D=await F.chat.completions.create({model:"nvidia/llama-3.1-nemoguard-8b-content-safety",messages:r,temperature:.5,top_p:1,max_tokens:1024}),S=((u=(m=D.choices[0])==null?void 0:m.message)==null?void 0:u.content)||"",k={...D,prompt_logprobs:null},w;try{w=JSON.parse(S);}catch{throw new l("PARSE_ERROR","Failed to parse safety analysis response","HIGH",{response:S})}if(ie("Successfully received response from NVIDIA NIM",{response:S,analysis:w,raw:k}),i){let B=(w==null?void 0:w["User Safety"])==="safe"&&(w==null?void 0:w["Response Safety"])==="safe"?"Both user query and response are safe":"Safety concerns detected";i({text:`Content Safety Analysis: ${B}`,success:!0,userMessage:g,assistantMessage:p,data:{response:S,analysis:w,raw:k}});}return !0}catch(r){throw ie("Failed to get response from NVIDIA NIM",{error:r}),i&&i({text:`Error analyzing content safety: ${r instanceof Error?r.message:String(r)}`,success:!1,userMessage:g,assistantMessage:p,data:{error:r instanceof Error?r.message:String(r)}}),new l("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:r})}}catch(n){throw ie("Failed to execute GET_CONTENT_SAFETY action",{error:n}),new l("NETWORK_ERROR","Failed to execute GET_CONTENT_SAFETY action","HIGH",{originalError:n})}}},Fe=rt;function Pe(s){let e=s.match(/\[PROMPT\]([\s\S]*?)\[\/PROMPT\]/);return e?{inputPrompt:e[1].trim()}:{inputPrompt:s.trim()}}var pt=U(),It=pt.NVIDIA_GRANULAR_LOG,ae=(s,e)=>{It&&(elizaLogger.info(`[JailbreakDetection] ${s}`,e),console.log(`[JailbreakDetection] ${s}`,e?JSON.stringify(e,null,2):""));},mt={name:"GET_JAILBREAK",similes:["CHECK_JAILBREAK","ANALYZE_JAILBREAK","JAILBREAK_CONTROL"],description:"Use NVIDIA NIM API to detect potential jailbreak attempts in prompts",examples:[[{user:"user",content:{text:`Analyze this prompt for potential jailbreak attempts [PROMPT]
What is the capital of France?
[/PROMPT]`,inputPrompt:"What is the capital of France?"}},{user:"assistant",content:{text:"Jailbreak Analysis: No jailbreak attempt detected.",success:true,data:{response:'{"jailbreak": "false", "score": "0.0123456789"}',analysis:{jailbreak:"false",score:"0.0123456789"}}}}]],validate:async(s,e)=>{var o;if(((o=e.content)==null?void 0:o.type)!=="GET_JAILBREAK")return  true;ae("Validating GET_JAILBREAK action",{content:e.content});try{if(!e.content.text)throw new l("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return ae("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_JAILBREAK",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,o,t={},i)=>{ae("Executing GET_JAILBREAK action");try{let m=e.content;console.log("Debug - Message content:",{hasText:!!(m!=null&&m.text),hasInputPrompt:!!(m!=null&&m.inputPrompt)});let u=await $(s);console.log("Debug - Config validated:",{hasApiKey:!!u.NVIDIA_NIM_API_KEY,env:u.NVIDIA_NIM_ENV});let n=Y(u.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!(n!=null&&n.baseUrl),baseUrl:n==null?void 0:n.baseUrl});let{inputPrompt:a}=Pe(m.text);console.log("Debug - Parsed content:",{hasInputPrompt:!!a,promptLength:a==null?void 0:a.length});let I=new et({apiKey:u.NVIDIA_NIM_API_KEY,baseURL:n.baseUrl});ae("Making request to NVIDIA NIM API",{model:"nvidia/nemoguard-jailbreak-detect",inputPrompt:a});try{let g=[{role:"user",content:a}],{data:p}=await ge.post("https://ai.api.nvidia.com/v1/security/nvidia/nemoguard-jailbreak-detect",{input:a},{headers:{Authorization:`Bearer ${u.NVIDIA_NIM_API_KEY}`,Accept:"application/json","Content-Type":"application/json"}}),F={jailbreak:p.jailbreak.toString(),score:p.score.toString()};if(ae("Successfully received response from NVIDIA NIM",{response:p,analysis:F}),i){let r=p.jailbreak?"Potential jailbreak attempt detected":"No jailbreak attempt detected",D=(p.score*100).toFixed(2),S=p.jailbreak?`Jailbreak confidence: ${D}%`:`Safe with ${D}% confidence`;i({text:`Jailbreak Analysis: ${r}. ${S}`,success:!0,inputPrompt:a,data:{response:JSON.stringify(p),analysis:F,raw:p}});}return !0}catch(g){throw ae("Failed to get response from NVIDIA NIM",{error:g}),i&&i({text:`Error analyzing jailbreak: ${g instanceof Error?g.message:String(g)}`,success:!1,inputPrompt:a,data:{error:g instanceof Error?g.message:String(g)}}),new l("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:g})}}catch(m){throw ae("Failed to execute GET_JAILBREAK action",{error:m}),new l("NETWORK_ERROR","Failed to execute GET_JAILBREAK action","HIGH",{originalError:m})}}},we=mt;var me={png:["image/png","img"],jpg:["image/jpg","img"],jpeg:["image/jpeg","img"],mp4:["video/mp4","video"]},Ce=E.join("packages","plugin-nvidia-nim","src","assets","cosmos"),xe="https://api.nvcf.nvidia.com/v2/nvcf/assets",H=class{apiKey;constructor(e){this.apiKey=e;}getAssetsPath(){let e=process.cwd(),o=E.join(e,Ce);for(;!h.existsSync(o)&&e!==E.parse(e).root;)e=E.dirname(e),o=E.join(e,Ce);if(!h.existsSync(o))throw new l("FILE_NOT_FOUND","Assets directory not found","HIGH");return o}getFileInfo(e){let o=E.extname(e).toLowerCase().slice(1);if(!(o in me))throw new l("VALIDATION_FAILED",`Unsupported file format: ${o}`,"HIGH");let[t,i]=me[o];return {ext:o,mimeType:t,type:i}}isValidUrl(e){try{return new URL(e),!0}catch{return  false}}async downloadFromUrl(e){var o;if(!this.isValidUrl(e))throw new l("VALIDATION_FAILED","Invalid URL provided","HIGH");try{let t=await ge.get(e,{responseType:"arraybuffer",headers:{Accept:Object.values(me).map(([I])=>I).join(", ")}}),i=t.headers["content-type"],m=(o=Object.entries(me).find(([I,[g]])=>g===i))==null?void 0:o[0];if(!m)throw new l("VALIDATION_FAILED",`Unsupported content type: ${i}`,"HIGH");let u=this.getAssetsPath(),n=`download_${Date.now()}.${m}`,a=E.join(u,n);return await h.promises.writeFile(a,t.data),n}catch(t){throw t instanceof l?t:new l("DOWNLOAD_ERROR","Failed to download media file","HIGH",{originalError:t})}}async getOrDownloadMedia(e){if(this.isValidUrl(e))return this.downloadFromUrl(e);let o=this.getAssetsPath(),t=E.join(o,e);if(!h.existsSync(t))throw new l("FILE_NOT_FOUND",`Media file not found: ${e}`,"HIGH");return e}async uploadAsset(e,o="Reference media file"){let{mimeType:t,type:i}=this.getFileInfo(e),m=h.readFileSync(e),u={Authorization:`Bearer ${this.apiKey}`,"Content-Type":"application/json",Accept:"application/json"};try{let{data:n}=await ge.post(xe,{contentType:t,description:o},{headers:u});return await ge.put(n.uploadUrl,m,{headers:{"x-amz-meta-nvcf-asset-description":o,"content-type":t}}),{assetId:n.assetId,type:i,mimeType:t,description:o}}catch(n){throw new l("API_ERROR","Failed to upload asset","HIGH",{originalError:n})}}async deleteAsset(e){try{await ge.delete(`${xe}/${e}`,{headers:{Authorization:`Bearer ${this.apiKey}`}});}catch(o){throw new l("API_ERROR","Failed to delete asset","LOW",{originalError:o})}}listAvailableMedia(){let e=this.getAssetsPath();return h.readdirSync(e).filter(o=>E.extname(o).toLowerCase().slice(1)in me).map(o=>E.join(e,o))}getMediaPath(e){let o=this.getAssetsPath(),t=E.join(o,e);if(!h.existsSync(t))throw new l("FILE_NOT_FOUND",`Media file not found: ${e}`,"HIGH");return t}async handleChatUpload(e,o){if(!h.existsSync(e))throw new l("FILE_NOT_FOUND",`Upload file not found: ${e}`,"HIGH");console.log("Debug - AssetManager - Input paths:",{uploadPath:e,targetDir:o,cwd:process.cwd()});let t=process.cwd().replace("/agent","");for(;!h.existsSync(E.join(t,"packages"))&&t!==E.parse(t).root;)t=E.dirname(t);let i=E.isAbsolute(o)?o:E.join(t,o);console.log("Debug - AssetManager - Resolved paths:",{workspaceRoot:t,absoluteTargetDir:i}),h.existsSync(i)||h.mkdirSync(i,{recursive:true});let m=E.extname(e),n=`upload_${Date.now()}${m}`,a=E.join(i,n);console.log("Debug - AssetManager - File paths:",{newFilename:n,newPath:a,exists:h.existsSync(e)});try{return await h.promises.copyFile(e,a),console.log("Debug - AssetManager - File copied successfully:",{from:e,to:a}),a}catch(I){throw new l("FILE_OPERATION_FAILED",`Failed to copy upload file: ${I instanceof Error?I.message:String(I)}`,"HIGH",{originalError:I})}}async handleImagesCosmos(e){console.log("Debug - AssetManager - Handling Cosmos image:",{uploadPath:e,type:"image"});let o=process.cwd().replace("/agent","");for(;!h.existsSync(E.join(o,"packages"))&&o!==E.parse(o).root;)o=E.dirname(o);let t=E.join(o,"packages","plugin-nvidia-nim","src","assets","cosmos","images"),i=E.join(t,"temp");if(h.existsSync(t)||h.mkdirSync(t,{recursive:true}),h.existsSync(i)||h.mkdirSync(i,{recursive:true}),!h.existsSync(e))throw new l("FILE_NOT_FOUND",`Image file not found: ${e}`,"HIGH");let m=E.extname(e).toLowerCase();if(![".jpg",".jpeg",".png",".gif"].includes(m))throw new l("VALIDATION_FAILED",`Invalid image format: ${m}`,"HIGH");let n=`cosmos_img_${Date.now()}${m}`,a=E.join(t,n);try{return await h.promises.copyFile(e,a),console.log("Debug - AssetManager - Cosmos image processed:",{from:e,to:a,size:h.statSync(a).size}),a}catch(I){throw new l("FILE_OPERATION_FAILED",`Failed to process Cosmos image: ${I instanceof Error?I.message:String(I)}`,"HIGH",{originalError:I})}}async handleVideosCosmos(e){console.log("Debug - AssetManager - Handling Cosmos video:",{uploadPath:e,type:"video"});let o=process.cwd().replace("/agent","");for(;!h.existsSync(E.join(o,"packages"))&&o!==E.parse(o).root;)o=E.dirname(o);let t=E.join(o,"packages","plugin-nvidia-nim","src","assets","cosmos","videos"),i=E.join(t,"temp");if(h.existsSync(t)||h.mkdirSync(t,{recursive:true}),h.existsSync(i)||h.mkdirSync(i,{recursive:true}),!h.existsSync(e))throw new l("FILE_NOT_FOUND",`Video file not found: ${e}`,"HIGH");let m=E.extname(e).toLowerCase();if(![".mp4",".avi",".mov",".webm"].includes(m))throw new l("VALIDATION_FAILED",`Invalid video format: ${m}`,"HIGH");let n=`cosmos_vid_${Date.now()}${m}`,a=E.join(t,n);try{return await h.promises.copyFile(e,a),console.log("Debug - AssetManager - Cosmos video processed:",{from:e,to:a,size:h.statSync(a).size}),a}catch(I){throw new l("FILE_OPERATION_FAILED",`Failed to process Cosmos video: ${I instanceof Error?I.message:String(I)}`,"HIGH",{originalError:I})}}async handleChatUploadCosmos(e,o){if(!h.existsSync(e))throw new l("FILE_NOT_FOUND",`Upload file not found: ${e}`,"HIGH");let t=E.extname(e).toLowerCase(),i=[".mp4",".avi",".mov",".webm"].includes(t),m=[".jpg",".jpeg",".png",".gif"].includes(t);if(console.log("Debug - AssetManager - Cosmos upload type:",{path:e,extension:t,isVideo:i,isImage:m}),i)return this.handleVideosCosmos(e);if(m)return this.handleImagesCosmos(e);throw new l("VALIDATION_FAILED",`Unsupported file type: ${t}`,"HIGH")}};var te=(s,e)=>{console.log(`Debug - Cosmos Parser - ${s}:`,e);},be=async(s,e,o)=>{var m,u;te("Input",{hasText:!!s,textLength:s==null?void 0:s.length,attachmentCount:void 0,hasApiKey:false});let t={isVideo:false,isImage:false,isBase64:false},i=Le.cwd().replace("/agent","");for(;!h.existsSync(E.join(i,"packages"))&&i!==E.parse(i).root;)i=E.dirname(i);if(te("Workspace paths",{cwd:Le.cwd(),workspaceRoot:i,hasPackagesDir:h.existsSync(E.join(i,"packages"))}),!s&&true)return t;if(s){let n=s.match(/\[MEDIA\](.*?)\[\/MEDIA\]/s),a=s.match(/\[QUERY\](.*?)\[\/QUERY\]/s);if(te("Text matches",{hasMediaMatch:!!n,hasQueryMatch:!!a,mediaContent:(m=n==null?void 0:n[1])==null?void 0:m.trim(),queryContent:(u=a==null?void 0:a[1])==null?void 0:u.trim()}),n){let I=n[1].trim(),g=E.join("packages","plugin-nvidia-nim","src","assets","cosmos"),p=E.join(i,g),F=E.join(p,I);te("Local file paths",{mediaFile:I,cosmosDir:g,fullCosmosDir:p,mediaPath:F}),t.mediaFile=F;let r=E.extname(I).toLowerCase();t.isVideo=[".mp4",".mov",".avi",".webm"].includes(r),t.isImage=[".jpg",".jpeg",".png",".gif",".webp"].includes(r);}a&&(t.query=a[1].trim());}return te("Result",{hasMediaFile:!!t.mediaFile,isVideo:t.isVideo,isImage:t.isImage,isBase64:t.isBase64,hasQuery:!!t.query,fullPath:t.mediaFile}),t};var Ee=U(),dt=Ee.NVIDIA_GRANULAR_LOG,y=(s,e)=>{dt&&(elizaLogger.info(`[CosmosVision] ${s}`,e),console.log(`[CosmosVision] ${s}`,e?JSON.stringify(e,null,2):""));},Ue=Ee.NVIDIA_COSMOS_INVOKE_URL||"https://ai.api.nvidia.com/v1/vlm/nvidia/cosmos-nemotron-34b",ke=Ee.NVIDIA_COSMOS_ASSET_URL||"https://api.nvcf.nvidia.com/v2/nvcf/assets";function At(s){let e=s.NVIDIA_NIM_API_KEY||process.env.TEST_NVCF_API_KEY;if(!e)throw new l("VALIDATION_FAILED","API key is missing. Please set NVIDIA_NIM_API_KEY or TEST_NVCF_API_KEY.","HIGH");return e}var oe={png:["image/png","img"],jpg:["image/jpg","img"],jpeg:["image/jpeg","img"],mp4:["video/mp4","video"]};var ft={name:"GET_COSMOS_DESCRIPTION",similes:["CHECK_COSMOS_DESCRIPTION","ANALYZE_COSMOS_DESCRIPTION","COSMOS_DESCRIPTION_CONTROL"],description:"Use NVIDIA Cosmos model to analyze and describe images or videos",examples:[[{user:"user",content:{text:`Analyze this image with the NVIDIA Cosmos [MEDIA]
sample.jpg
[/MEDIA]
[QUERY]
Describe what's happening in this image
[/QUERY]`,mediaPath:"sample.jpg"}},{user:"assistant",content:{text:"Scene Analysis: A person wearing a hard hat and safety vest is working in an industrial setting.",success:true,data:{response:"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.",analysis:{description:"The worker, who is wearing a neon vest, black pants, and a yellow hard hat, is pulling a yellow caution tape across the aisle. This action suggests that he is cordoning off the area, likely for safety or maintenance reasons.",confidence:.92}}}}]],validate:async(s,e)=>{var o;if(((o=e.content)==null?void 0:o.type)!=="GET_COSMOS_DESCRIPTION")return  true;y("Validating GET_COSMOS_DESCRIPTION action",{content:e.content});try{if(!e.content.text)throw new l("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return y("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_COSMOS_DESCRIPTION",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,o,t={},i)=>{var m,u;y("Executing GET_COSMOS_DESCRIPTION action");try{let n=e.content,a=await $(s),I=Y(a.NVIDIA_NIM_ENV),g=At(a);y("API key configuration",{hasKey:!!g,length:g==null?void 0:g.length,source:a.NVIDIA_NIM_API_KEY?"config":process.env.TEST_NVCF_API_KEY?"env":"default"});let p=await be(n.text);if(y("Parsed prompt",p),!p.mediaFile)throw new l("VALIDATION_FAILED","No media file provided in the prompt","HIGH");let F=new H(a.NVIDIA_NIM_API_KEY);y("Making request to NVIDIA NIM API",{model:"nvidia/cosmos-nemotron-34b",query:p.query,mediaFile:p.mediaFile,isVideo:p.isVideo,isImage:p.isImage}),console.log("Debug - Network config",{baseVisionUrl:I.baseVisionUrl});try{let r;if(p.isVideo)y("Processing video file",{originalPath:p.mediaFile,type:"video"}),r=await F.handleVideosCosmos(p.mediaFile),y("Video file processed",{originalPath:p.mediaFile,processedPath:r});else if(p.isImage)y("Processing image file",{originalPath:p.mediaFile,type:"image"}),r=await F.handleImagesCosmos(p.mediaFile),y("Image file processed",{originalPath:p.mediaFile,processedPath:r});else {let K=E.join("packages","plugin-nvidia-nim","src","assets","cosmos");y("Processing media file using general handler",{originalPath:p.mediaFile,targetDir:K}),r=await F.handleChatUploadCosmos(p.mediaFile,K),y("Media file processed using general handler",{originalPath:p.mediaFile,processedPath:r});}y("Processing file extension",{mediaPath:r,fullPath:E.resolve(r)});let D=E.extname(r).toLowerCase().slice(1);if(!(D in oe)){let K=`Unsupported file extension: ${D}`;throw y("File extension error",{ext:D,supportedExtensions:Object.keys(oe)}),new Error(K)}y("File extension validated",{ext:D,mimeType:oe[D][0],mediaType:oe[D][1]});let S=h.readFileSync(r);y("File read",{size:S.length,mediaPath:r});let k="Reference media file",w={Authorization:`Bearer ${g}`,"Content-Type":"application/json",Accept:"application/json"},B={contentType:oe[D][0],description:k};y("Initiating asset upload authorization",{headers:{...w,Authorization:"Bearer [REDACTED]"},postData:B});let{data:j}=await ge.post(ke,B,{headers:w});y("Asset upload authorized",{uploadUrl:j.uploadUrl,assetId:j.assetId});let X={"x-amz-meta-nvcf-asset-description":k,"content-type":oe[D][0]};y("Uploading file to authorized URL",{uploadUrl:j.uploadUrl,headers:X,fileSize:S.length});let c=await ge.put(j.uploadUrl,S,{headers:X});if(c.status!==200){let K=`Asset upload failed: ${j.assetId}`;throw y("Upload failed",{status:c.status,assetId:j.assetId,response:c.data}),new Error(K)}let R=j.assetId;y("Asset upload successful",{assetId:R,status:c.status});let x=`<${oe[D][1]} src="data:${oe[D][0]};asset_id,${R}" />`,T=`${p.query||"Describe this"} ${x}`;y("Constructed media content",{mediaContent:x,fullPrompt:T});let G=[{role:"user",content:T}],L={Authorization:`Bearer ${g}`,"Content-Type":"application/json",Accept:"application/json","NVCF-INPUT-ASSET-REFERENCES":R,"NVCF-FUNCTION-ASSET-IDS":R},A={max_tokens:1024,temperature:.2,top_p:.7,seed:50,num_frames_per_inference:8,messages:G,stream:!1,model:"nvidia/vila"};y("Preparing Cosmos API request",{url:Ue,headers:{...L,Authorization:"Bearer [REDACTED]"},payload:{...A,messages:G}});let d=await ge.post(Ue,A,{headers:L});y("Received Cosmos API response",{status:d.status,headers:d.headers,data:d.data}),y("Initiating asset cleanup",{assetId:R}),await ge.delete(`${ke}/${R}`,{headers:{Authorization:`Bearer ${g}`}}),y("Asset cleanup completed",{assetId:R});let O=((u=(m=d.data.choices[0])==null?void 0:m.message)==null?void 0:u.content)||"",f={...d.data,prompt_logprobs:null},_={description:O,confidence:.92};return y("Processing complete",{responseLength:O.length,success:!0,assetId:R}),i&&i({text:`Scene Analysis: ${O}`,success:!0,mediaPath:r,data:{response:O,analysis:_,raw:f,assetId:R}}),!0}catch(r){throw y("Failed to get response from NVIDIA NIM",{error:r}),i&&i({text:`Error analyzing media: ${r instanceof Error?r.message:String(r)}`,success:!1,mediaPath:p.mediaFile,data:{error:r instanceof Error?r.message:String(r)}}),new l("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:r})}}catch(n){throw y("Failed to execute GET_COSMOS_DESCRIPTION action",{error:n}),new l("NETWORK_ERROR","Failed to execute GET_COSMOS_DESCRIPTION action","HIGH",{originalError:n})}}},He=ft;async function Ke(s,e,o){if(e&&e.length>0){let u=e[0];if(!u.url)throw new Error("Invalid media attachment: no URL found");if(o){let n=new H(o),a=E.join("packages","plugin-nvidia-nim","src","assets","deepfake"),I=await n.handleChatUpload(u.url,a);return {mediaFile:E.basename(I),isBase64:false}}return {mediaFile:u.url,isBase64:u.url.startsWith("data:image")}}let t=s.match(/\[IMAGE\]([\s\S]*?)\[\/IMAGE\]/);if(!t)throw new Error("Image file path or data is required");let i=t[1].trim(),m=i.startsWith("data:image");return {mediaFile:i,isBase64:m}}var _t=U(),Nt=_t.NVIDIA_GRANULAR_LOG,Q=(s,e)=>{Nt&&(elizaLogger.info(`[DeepFakeDetection] ${s}`,e),console.log(`[DeepFakeDetection] ${s}`,e?JSON.stringify(e,null,2):""));},Et={name:"GET_DEEP_FAKE",similes:["CHECK_DEEP_FAKE","ANALYZE_DEEP_FAKE","DEEP_FAKE_CONTROL"],description:"Use NVIDIA DeepFake detection model to analyze images for potential manipulation",examples:[[{user:"user",content:{text:`Check if this image is a deepfake please[IMAGE]
test_image.jpg
[/IMAGE]`,mediaPath:"test_image.jpg"}},{user:"assistant",content:{text:"DeepFake Analysis: Image contains 1 face(s). Face #1: 99.82% likely to be a deepfake.",success:true,data:{response:"Detected potential manipulation in the image",analysis:[{index:0,bounding_boxes:[{vertices:[{x:167.92,y:105.52},{x:327.76,y:327.61}],bbox_confidence:.9352,is_deepfake:.9982}],status:"SUCCESS"}]}}}]],validate:async(s,e)=>{var o;if(((o=e.content)==null?void 0:o.type)!=="GET_DEEP_FAKE")return  true;Q("Validating GET_DEEP_FAKE action",{content:e.content});try{if(!e.content.text)throw new l("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return Q("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_DEEP_FAKE",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,o,t={},i)=>{var m,u,n,a,I,g,p,F,r,D,S,k,w,B,j,X;Q("Executing GET_DEEPFAKE action");try{let c=e.content;console.log("Debug - Full message content:",{fullContent:e.content,rawText:c==null?void 0:c.text,type:(m=e.content)==null?void 0:m.type,allKeys:Object.keys(e.content||{}),attachments:(u=e.content)==null?void 0:u.attachments}),console.log("Debug - Message content details:",{hasText:!!(c!=null&&c.text),hasMediaFile:!!(c!=null&&c.mediaFile),hasAttachments:!!((a=(n=e.content)==null?void 0:n.attachments)!=null&&a.length),textContent:c==null?void 0:c.text,mediaFile:c==null?void 0:c.mediaFile,contentType:typeof(c==null?void 0:c.text),attachmentCount:((g=(I=e.content)==null?void 0:I.attachments)==null?void 0:g.length)||0,firstAttachmentUrl:(r=(F=(p=e.content)==null?void 0:p.attachments)==null?void 0:F[0])==null?void 0:r.url,firstAttachmentType:(k=(S=(D=e.content)==null?void 0:D.attachments)==null?void 0:S[0])==null?void 0:k.contentType});let R=await $(s);console.log("Debug - Config validated:",{hasApiKey:!!R.NVIDIA_NIM_API_KEY,env:R.NVIDIA_NIM_ENV});let x=Y(R.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!(x!=null&&x.baseUrl),baseUrl:x==null?void 0:x.baseUrl}),console.log("Debug - Raw prompt:",{text:c.text,hasMediaFile:!!c.mediaFile,mediaFile:c.mediaFile,promptLength:(w=c.text)==null?void 0:w.length,attachments:(B=e.content)==null?void 0:B.attachments});let T=await Ke(c.text,(j=e.content)==null?void 0:j.attachments,R.NVIDIA_NIM_API_KEY);console.log("Debug - Parsed content:",{hasMediaFile:!!T.mediaFile,mediaPath:T.mediaFile,mediaLength:(X=T.mediaFile)==null?void 0:X.length,isBase64:T.isBase64});let G,L,A="",d,O;if(T.isBase64){for(console.log("Debug - Using base64 image from chat"),G=T.mediaFile.split("base64,")[1],L=Buffer.from(G,"base64"),d=process.cwd().replace("/agent","");!h.existsSync(E.join(d,"packages"))&&d!==E.parse(d).root;)d=E.dirname(d);O=E.join(d,"packages","plugin-nvidia-nim","src","assets","deepfake");let f=E.join(O,"temp");h.existsSync(f)||h.mkdirSync(f,{recursive:!0}),A=E.join(f,`temp_${Date.now()}.jpg`),h.writeFileSync(A,L);}else {for(d=process.cwd().replace("/agent","");!h.existsSync(E.join(d,"packages"))&&d!==E.parse(d).root;)d=E.dirname(d);console.log("Debug - Workspace detection:",{workspaceRoot:d,hasPackagesDir:h.existsSync(E.join(d,"packages"))}),O=E.join(d,"packages","plugin-nvidia-nim","src","assets","deepfake"),A=E.join(O,T.mediaFile);let f=E.resolve(A);console.log("Debug - File paths:",{workspaceRoot:d,deepfakeDir:O,mediaPath:A,absolutePath:f,cwd:process.cwd(),exists:h.existsSync(A),dirExists:h.existsSync(O)}),h.existsSync(O)||(console.log("Debug - Creating deepfake directory"),h.mkdirSync(O,{recursive:!0}));try{await h.promises.access(A,h.constants.R_OK),console.log("Debug - File is readable at path:",A);let _=await h.promises.stat(A);console.log("Debug - File stats:",{size:_.size,isFile:_.isFile(),permissions:_.mode});}catch(_){console.error("Debug - File access error:",{error:_ instanceof Error?_.message:String(_),path:A});}if(!h.existsSync(A)){console.error(`Media file not found: ${A}`);try{let _=await h.promises.readdir(E.dirname(A));console.log("Debug - Directory contents:",{path:E.dirname(A),files:_});}catch(_){console.error("Debug - Failed to read directory:",_);}throw new l("FILE_NOT_FOUND",`Media file not found: ${A}`,"HIGH")}console.log("Debug - Reading file from path"),L=h.readFileSync(A),G=L.toString("base64");}Q("Making request to NVIDIA NIM API",{model:"hive/deepfake-image-detection",hasMediaFile:!0,imageSize:L.length,isBase64Image:T.isBase64});try{let f,_={Authorization:`Bearer ${R.NVIDIA_NIM_API_KEY}`,Accept:"application/json"};if(G.length<18e4)f={input:[`data:image/jpeg;base64,${G}`]},_["Content-Type"]="application/json";else {let J=null,v=A;if(T.isBase64){let ce=E.join(d,"packages","plugin-nvidia-nim","src","assets","deepfake","temp");h.existsSync(ce)||h.mkdirSync(ce,{recursive:!0}),J=E.join(ce,`temp_${Date.now()}_large.jpg`),h.writeFileSync(J,L),v=J;}let fe=await new H(R.NVIDIA_NIM_API_KEY).uploadAsset(v);J&&h.existsSync(J)&&h.unlinkSync(J),f={input:[`data:image/jpeg;asset_id,${fe.assetId}`]},_["Content-Type"]="application/json",_["NVCF-INPUT-ASSET-REFERENCES"]=fe.assetId;}let K="https://ai.api.nvidia.com/v1/cv/hive/deepfake-image-detection";console.log("Debug - Making API request:",{url:K,payloadSize:JSON.stringify(f).length,hasAuth:!!_.Authorization});let{data:le}=await ge.post(K,f,{headers:_,maxBodyLength:1/0,maxContentLength:1/0});console.log("Debug - API Response received:",{status:"success",dataLength:JSON.stringify(le).length});let pe=le;Q("Successfully received response from NVIDIA NIM",{response:pe});let z=pe.data[0];Q("Processing analysis results",{analysis:z});let W="";if(z.image){let J=`df_analysis_${Date.now()}.jpg`;W=E.join(O,J),h.existsSync(E.dirname(W))||h.mkdirSync(E.dirname(W),{recursive:!0});let v=Buffer.from(z.image.split(",")[1],"base64");h.writeFileSync(W,v),Q("Saved processed image",{path:W});}let ye=z.bounding_boxes.length,Ie=z.bounding_boxes.map((J,v)=>`Face #${v+1}: ${(J.is_deepfake*100).toFixed(2)}% likely to be a deepfake`),Ae=`DeepFake Analysis: Image contains ${ye} face(s). ${Ie.join(". ")}${W?`

Processed image saved to: ${W}`:""}`;return i&&i({text:Ae,success:!0,mediaPath:A,data:{response:"Analyzed image for potential manipulation",analysis:[z],processedImage:W||null}}),!0}catch(f){throw Q("Failed to get response from NVIDIA NIM",{error:f}),i&&i({text:`Error analyzing image: ${f instanceof Error?f.message:String(f)}`,success:!1,mediaPath:T.mediaFile,data:{error:f instanceof Error?f.message:String(f)}}),new l("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:f})}}catch(c){throw Q("Failed to execute GET_DEEP_FAKE action",{error:c}),new l("NETWORK_ERROR","Failed to execute GET_DEEP_FAKE action","HIGH",{originalError:c})}}},Ye=Et;async function ze(s,e,o){try{if(e&&e.length>0){let u=e[0];if(!u.url)throw new Error("Invalid media attachment: no URL found");if(o){let n=new H(o),a=E.join("packages","plugin-nvidia-nim","src","assets","aiimage"),I=await n.handleChatUpload(u.url,a);return {mediaFile:E.basename(I),isBase64:!1}}return {mediaFile:u.url,isBase64:u.url.startsWith("data:image")}}let t=s.match(/\[IMAGE\]([\s\S]*?)\[\/IMAGE\]/);if(!t)throw new Error("Image file path or data is required");let i=t[1].trim(),m=i.startsWith("data:image");return {mediaFile:i,isBase64:m}}catch(t){throw t instanceof l?t:new l("PARSE_ERROR","Failed to parse AI image prompt","HIGH",{originalError:t})}}var yt=U(),St=yt.NVIDIA_GRANULAR_LOG,se=(s,e)=>{St&&(elizaLogger.info(`[AIImageDetection] ${s}`,e),console.log(`[AIImageDetection] ${s}`,e?JSON.stringify(e,null,2):""));},Dt={name:"GET_AI_IMAGE",similes:["CHECK_AI_IMAGE","ANALYZE_AI_IMAGE","AI_IMAGE_CONTROL"],description:"Use NVIDIA AI Image detection model to analyze if images were generated by AI",examples:[[{user:"user",content:{text:`Check if this image is AI generated [IMAGE]
test_ai.jpg
[/IMAGE]  `,mediaPath:"test_ai.jpg"}},{user:"assistant",content:{text:"AI Image Analysis: Image is 99.94% likely to be AI-generated. Most likely source: Stable Diffusion XL (88.75% confidence).",success:true,data:{response:"Detected AI-generated image",analysis:[{index:0,is_ai_generated:.9994,possible_sources:{stablediffusionxl:.8875,midjourney:.0136,dalle:.0518},status:"SUCCESS"}]}}}]],validate:async(s,e)=>{var o;if(((o=e.content)==null?void 0:o.type)!=="GET_AI_IMAGE")return  true;se("Validating GET_AI_IMAGE action",{content:e.content});try{if(!e.content.text)throw new l("VALIDATION_FAILED","text content is required","HIGH");return !0}catch(t){return se("Validation failed",{error:t}),elizaLogger.error("Validation failed for GET_AI_IMAGE",{error:t instanceof Error?t.message:String(t)}),false}},handler:async(s,e,o,t={},i)=>{var m,u,n,a,I,g,p,F,r,D,S,k,w,B,j,X;se("Executing GET_AI_IMAGE action");try{let c=e.content;console.log("Debug - Full message content:",{fullContent:e.content,rawText:c==null?void 0:c.text,type:(m=e.content)==null?void 0:m.type,allKeys:Object.keys(e.content||{}),attachments:(u=e.content)==null?void 0:u.attachments}),console.log("Debug - Message content details:",{hasText:!!(c!=null&&c.text),hasMediaFile:!!(c!=null&&c.mediaFile),hasAttachments:!!((a=(n=e.content)==null?void 0:n.attachments)!=null&&a.length),textContent:c==null?void 0:c.text,mediaFile:c==null?void 0:c.mediaFile,contentType:typeof(c==null?void 0:c.text),attachmentCount:((g=(I=e.content)==null?void 0:I.attachments)==null?void 0:g.length)||0,firstAttachmentUrl:(r=(F=(p=e.content)==null?void 0:p.attachments)==null?void 0:F[0])==null?void 0:r.url,firstAttachmentType:(k=(S=(D=e.content)==null?void 0:D.attachments)==null?void 0:S[0])==null?void 0:k.contentType});let R=await $(s);console.log("Debug - Config validated:",{hasApiKey:!!R.NVIDIA_NIM_API_KEY,env:R.NVIDIA_NIM_ENV});let x=Y(R.NVIDIA_NIM_ENV);console.log("Debug - Network config:",{hasBaseUrl:!!(x!=null&&x.baseUrl),baseUrl:x==null?void 0:x.baseUrl}),console.log("Debug - Raw prompt:",{text:c.text,hasMediaFile:!!c.mediaFile,mediaFile:c.mediaFile,promptLength:(w=c.text)==null?void 0:w.length,attachments:(B=e.content)==null?void 0:B.attachments});let T=await ze(c.text,(j=e.content)==null?void 0:j.attachments,R.NVIDIA_NIM_API_KEY);console.log("Debug - Parsed content:",{hasMediaFile:!!T.mediaFile,mediaPath:T.mediaFile,mediaLength:(X=T.mediaFile)==null?void 0:X.length,isBase64:T.isBase64});let G,L,A="",d,O;if(T.isBase64){for(console.log("Debug - Using base64 image from chat"),G=T.mediaFile.split("base64,")[1],L=Buffer.from(G,"base64"),d=process.cwd().replace("/agent","");!h.existsSync(E.join(d,"packages"))&&d!==E.parse(d).root;)d=E.dirname(d);O=E.join(d,"packages","plugin-nvidia-nim","src","assets","aiimage");let f=E.join(O,"temp");h.existsSync(f)||h.mkdirSync(f,{recursive:!0}),A=E.join(f,`temp_${Date.now()}.jpg`),h.writeFileSync(A,L);}else {for(d=process.cwd().replace("/agent","");!h.existsSync(E.join(d,"packages"))&&d!==E.parse(d).root;)d=E.dirname(d);console.log("Debug - Workspace detection:",{workspaceRoot:d,hasPackagesDir:h.existsSync(E.join(d,"packages"))}),O=E.join(d,"packages","plugin-nvidia-nim","src","assets","aiimage"),A=E.join(O,T.mediaFile);let f=E.resolve(A);console.log("Debug - File paths:",{workspaceRoot:d,aiImageDir:O,mediaPath:A,absolutePath:f,cwd:process.cwd(),exists:h.existsSync(A),dirExists:h.existsSync(O)}),h.existsSync(O)||(console.log("Debug - Creating aiimage directory"),h.mkdirSync(O,{recursive:!0}));try{await h.promises.access(A,h.constants.R_OK),console.log("Debug - File is readable at path:",A);let _=await h.promises.stat(A);console.log("Debug - File stats:",{size:_.size,isFile:_.isFile(),permissions:_.mode});}catch(_){console.error("Debug - File access error:",{error:_ instanceof Error?_.message:String(_),path:A});}if(!h.existsSync(A)){console.error(`Media file not found: ${A}`);try{let _=await h.promises.readdir(E.dirname(A));console.log("Debug - Directory contents:",{path:E.dirname(A),files:_});}catch(_){console.error("Debug - Failed to read directory:",_);}throw new l("FILE_NOT_FOUND",`Media file not found: ${A}`,"HIGH")}console.log("Debug - Reading file from path"),L=h.readFileSync(A),G=L.toString("base64");}se("Making request to NVIDIA NIM API",{model:"hive/ai-generated-image-detection",hasMediaFile:!0,imageSize:L.length,isBase64Image:T.isBase64});try{let f,_={Authorization:`Bearer ${R.NVIDIA_NIM_API_KEY}`,Accept:"application/json"};if(G.length<18e4)f={input:[`data:image/jpeg;base64,${G}`]},_["Content-Type"]="application/json";else {let v=null,re=A;if(T.isBase64){let ue=E.join(d,"packages","plugin-nvidia-nim","src","assets","aiimage","temp");h.existsSync(ue)||h.mkdirSync(ue,{recursive:!0}),v=E.join(ue,`temp_${Date.now()}_large.jpg`),h.writeFileSync(v,L),re=v;}let ce=await new H(R.NVIDIA_NIM_API_KEY).uploadAsset(re);v&&h.existsSync(v)&&h.unlinkSync(v),f={input:[`data:image/jpeg;asset_id,${ce.assetId}`]},_["Content-Type"]="application/json",_["NVCF-INPUT-ASSET-REFERENCES"]=ce.assetId;}let K="https://ai.api.nvidia.com/v1/cv/hive/ai-generated-image-detection";console.log("Debug - Making API request:",{url:K,payloadSize:JSON.stringify(f).length,hasAuth:!!_.Authorization});let{data:le}=await ge.post(K,f,{headers:_,maxBodyLength:1/0,maxContentLength:1/0});console.log("Debug - API Response received:",{status:"success",dataLength:JSON.stringify(le).length});let pe=le;se("Successfully received response from NVIDIA NIM",{response:pe});let z=pe.data[0];se("Processing analysis results",{analysis:z});let W=(z.is_ai_generated*100).toFixed(2),Ie=Object.entries(z.possible_sources).reduce((v,re)=>re[1]>v[1]?re:v),Ae=(Ie[1]*100).toFixed(2),Se=`AI Image Analysis: Image is ${W}% likely to be AI-generated. ${Ie[0]!=="none"?`Most likely source: ${Ie[0]} (${Ae}% confidence).`:"No specific AI source identified."}`;return i&&i({text:Se,success:!0,mediaPath:A,data:{response:"Analyzed image for AI generation",analysis:[z]}}),!0}catch(f){throw se("Failed to get response from NVIDIA NIM",{error:f}),i&&i({text:`Error analyzing image: ${f instanceof Error?f.message:String(f)}`,success:!1,mediaPath:A,data:{error:f instanceof Error?f.message:String(f)}}),new l("API_ERROR","Failed to get response from NVIDIA NIM","HIGH",{originalError:f})}}catch(c){throw se("Failed to execute GET_AI_IMAGE action",{error:c}),new l("NETWORK_ERROR","Failed to execute GET_AI_IMAGE action","HIGH",{originalError:c})}}},qe=Dt;var Qe=Mt({text:N.cyan("Initializing NVIDIA NIM Plugin..."),spinner:"dots12",color:"cyan"}).start(),he=[Re,Fe,we,He,Ye,qe],Rt=U().NVIDIA_NIM_SPASH;if(Rt){console.log(`
`+N.cyan("\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510")),console.log(N.cyan("\u2502")+N.yellow.bold("          NVIDIA NIM PLUGIN             ")+N.cyan(" \u2502")),console.log(N.cyan("\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524")),console.log(N.cyan("\u2502")+N.white("  Initializing NVIDIA NIM Services...    ")+N.cyan("\u2502")),console.log(N.cyan("\u2502")+N.white("  Version: 1.0.0                        ")+N.cyan("\u2502")),console.log(N.cyan("\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518")),Qe.succeed(N.green("NVIDIA NIM Plugin initialized successfully!"));let s=new We({head:[N.cyan("Action"),N.cyan("H"),N.cyan("V"),N.cyan("E"),N.cyan("Similes")],style:{head:[],border:["cyan"]}});he.forEach(o=>{var t,i;s.push([N.white(o.name),typeof o.handler=="function"?N.green("\u2713"):N.red("\u2717"),typeof o.validate=="function"?N.green("\u2713"):N.red("\u2717"),((t=o.examples)==null?void 0:t.length)>0?N.green("\u2713"):N.red("\u2717"),N.gray(((i=o.similes)==null?void 0:i.join(", "))||"none")]);}),console.log(`
`+s.toString());let e=new We({style:{border:["cyan"]}});e.push([N.cyan("Plugin Status")],[N.white("Name    : ")+N.yellow("nvidia-nim")],[N.white("Actions : ")+N.green(he.length.toString())],[N.white("Status  : ")+N.green("Loaded & Ready")]),console.log(`
`+e.toString()+`
`);}else Qe.stop();var Tt={name:"nvidia-nim",description:"NVIDIA NIM Plugin for AI Foundation Models integration",actions:he,evaluators:[]};var cs=Tt;export{cs as default,Tt as nvidiaNimPlugin};//# sourceMappingURL=index.js.map
//# sourceMappingURL=index.js.map